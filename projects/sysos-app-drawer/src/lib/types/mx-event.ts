export interface mxEvent {
  objects: any[];
  addListener: (element: any, eventName: any, funct: any) => void;
  removeListener: (element: any, eventName: any, funct: any) => void;
  removeAllListeners(element: any): void;
  addGestureListeners(node: any, startListener: any, moveListener: any, endListener: any): void;
  removeGestureListeners(node: any, startListener: any, moveListener: any, endListener: any): void;
  redirectMouseEvents(node: any, graph: any, state: any, down: any, move: any, up: any, dblClick: any): void;
  release(element: any): void;
  addMouseWheelListener(funct: any): void;
  disableContextMenu: (element: any) => void;
  getSource(evt: any): any;
  isConsumed(evt: any): boolean;
  isTouchEvent(evt: any): boolean;
  isPenEvent(evt: any): boolean;
  isMultiTouchEvent(evt: any): boolean;
  isMouseEvent(evt: any): boolean;
  isLeftMouseButton(evt: any): boolean;
  isMiddleMouseButton(evt: any): boolean;
  isRightMouseButton(evt: any): boolean;
  isPopupTrigger(evt: any): boolean;
  isShiftDown(evt: any): boolean;
  isAltDown(evt: any): boolean;
  isControlDown(evt: any): boolean;
  isMetaDown(evt: any): boolean;
  getMainEvent(e: any): any;
  getClientX(e: any): any;
  getClientY(e: any): any;
  consume(evt: any, preventDefault?: boolean, stopPropagation?: boolean): void;
  LABEL_HANDLE: number;
  ROTATION_HANDLE: number;
  CUSTOM_HANDLE: number;
  VIRTUAL_HANDLE: number;
  MOUSE_DOWN: string;
  MOUSE_MOVE: string;
  MOUSE_UP: string;
  ACTIVATE: string;
  RESIZE_START: string;
  RESIZE: string;
  RESIZE_END: string;
  MOVE_START: string;
  MOVE: string;
  MOVE_END: string;
  PAN_START: string;
  PAN: string;
  PAN_END: string;
  MINIMIZE: string;
  NORMALIZE: string;
  MAXIMIZE: string;
  HIDE: string;
  SHOW: string;
  CLOSE: string;
  DESTROY: string;
  REFRESH: string;
  SIZE: string;
  SELECT: string;
  FIRED: string;
  FIRE_MOUSE_EVENT: string;
  GESTURE: string;
  TAP_AND_HOLD: string;
  GET: string;
  RECEIVE: string;
  CONNECT: string;
  DISCONNECT: string;
  SUSPEND: string;
  RESUME: string;
  MARK: string;
  ROOT: string;
  POST: string;
  OPEN: string;
  SAVE: string;
  BEFORE_ADD_VERTEX: string;
  ADD_VERTEX: string;
  AFTER_ADD_VERTEX: string;
  DONE: string;
  EXECUTE: string;
  EXECUTED: string;
  BEGIN_UPDATE: string;
  START_EDIT: string;
  END_UPDATE: string;
  END_EDIT: string;
  BEFORE_UNDO: string;
  UNDO: string;
  REDO: string;
  CHANGE: string;
  NOTIFY: string;
  LAYOUT_CELLS: string;
  CLICK: string;
  SCALE: string;
  TRANSLATE: string;
  SCALE_AND_TRANSLATE: string;
  UP: string;
  DOWN: string;
  ADD: string;
  REMOVE: string;
  CLEAR: string;
  ADD_CELLS: string;
  CELLS_ADDED: string;
  MOVE_CELLS: string;
  CELLS_MOVED: string;
  RESIZE_CELLS: string;
  CELLS_RESIZED: string;
  TOGGLE_CELLS: string;
  CELLS_TOGGLED: string;
  ORDER_CELLS: string;
  CELLS_ORDERED: string;
  REMOVE_CELLS: string;
  CELLS_REMOVED: string;
  GROUP_CELLS: string;
  UNGROUP_CELLS: string;
  REMOVE_CELLS_FROM_PARENT: string;
  FOLD_CELLS: string;
  CELLS_FOLDED: string;
  ALIGN_CELLS: string;
  LABEL_CHANGED: string;
  CONNECT_CELL: string;
  CELL_CONNECTED: string;
  SPLIT_EDGE: string;
  FLIP_EDGE: string;
  START_EDITING: string;
  EDITING_STARTED: string;
  EDITING_STOPPED: string;
  ADD_OVERLAY: string;
  REMOVE_OVERLAY: string;
  UPDATE_CELL_SIZE: string;
  ESCAPE: string;
  DOUBLE_CLICK: string;
  START: string;
  RESET: string;
}

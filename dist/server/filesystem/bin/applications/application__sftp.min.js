/**
Systems OS - 0.0.1

Copyright (c) 2018 Isart Navarro Farell
License: MIT
*/
var sftpApp = angular.module('sftpApp', []);

(function () {
    'use strict';
    sftpApp.run(['ApplicationsFactory', function (ApplicationsFactory) {

        ApplicationsFactory.registerApplication({
            id: 'sftp',
            ico: 'upload',
            name: 'SFTP',
            menu: true,
            actions: true,
            status: true,
            style: 'width:1275px;height:600px;top:9%;left:10%;'
        });

    }]);
}());
(function () {
    'use strict';
    sftpApp.controller('sftpActionController', ['$scope', 'sftpFactory', 'connectionsFactory', function ($scope, sftpFactory, connectionsFactory) {

        var _this = this;
        var APPscope = $scope.$parent.$parent.$parent.$parent;

        /*
         * Bindings
         */
        $scope.$watch(function () {
            return connectionsFactory.connections();
        }, function (newValue) {
            _this.connections = newValue.sftp;
        });

        $scope.$watch(function () {
            return sftpFactory.activeConnection();
        }, function (newValue) {
            _this.activeConnection = newValue;
        });

        this.getActiveConnection = function () {
            if (!_this.activeConnection) return null;

            return connectionsFactory.getConnectionByUuid(_this.activeConnection);
        };

        /*
         * ng-click functions
         */
        this.toggleExchange = function () {
            APPscope.$broadcast('sftp__toggle_exchange');
        };

        this.newConnection = function () {
            APPscope.$broadcast('sftp__new_connection');
        };

        this.disconnectConnection = function () {
            if (_this.activeConnection == null) return;
            APPscope.$broadcast('sftp__disconnect_connection');
        };

        this.deleteConnection = function () {
            if (_this.activeConnection == null) return;
            APPscope.$broadcast('sftp__delete_connection');
        };

        this.editConnection = function () {
            if (_this.activeConnection == null) return;
            APPscope.$broadcast('sftp__connection_edit');
        };

    }]);
}());
(function () {
    'use strict';
    sftpApp.controller('sftpBodyController', ['$scope', '$element', 'toastr', 'sftpFactory', 'ServerFactory', 'Upload', 'fileSystemFactory', '$timeout', 'cmanagerFactory', 'ApplicationsFactory', 'connectionsFactory', 'modalFactory',
        function ($scope, $element, toastr, sftpFactory, ServerFactory, Upload, fileSystemFactory, $timeout, cmanagerFactory, ApplicationsFactory, connectionsFactory, modalFactory) {

            var _this = this;

            /*
             * Init
             */

            ServerFactory.getConfigFile('applications/sftp/config.json', function (data) {
                return connectionsFactory.setSavedConnections(data.data);
            }, function () {
                console.log('Error');
            });

            /*
             * Bindings
             */
            this.showNewConnection = true;
            this.viewSide = true;
            this.viewExchange = true;
            this.uploadFiles = [];

            this.Form = {
                autologin: true,
                save: true,
                port: 22
            };
            this.sftpConnect_form = {};

            this.getActiveConnection = function () {
                if (!_this.activeConnection) return null;

                return connectionsFactory.getConnectionByUuid(_this.activeConnection);
            };

            $scope.$watch(function () {
                return connectionsFactory.connections();
            }, function (newValue) {
                _this.connections = newValue.sftp;
            });

            $scope.$watch(function () {
                return sftpFactory.activeConnection();
            }, function (newValue) {
                _this.activeConnection = newValue;
            });

            $scope.$watch(function () {
                return cmanagerFactory.credentials();
            }, function (newValue) {
                _this.credentials = newValue;
            });

            $scope.$on('sftp__toggle_exchange', function () {
                _this.viewExchange = !_this.viewExchange;
            });

            $scope.$on('sftp__new_connection', function () {
                _this.newConnection();
            });

            $scope.$on('sftp__disconnect_connection', function () {
                _this.Form = _this.getActiveConnection();
                connectionsFactory.disconnectConnection(_this.activeConnection);
                _this.showNewConnection = true;
            });

            /*
             * Called at sftpActionController
             */
            $scope.$on('sftp__delete_connection', function () {
                _this.deleteConnection(_this.getActiveConnection());
            });

            /*
             * Called at sftpActionController
             */
            $scope.$on('sftp__connection_edit', function () {
                _this.showNewConnection = true;
                _this.Form = _this.getActiveConnection();
            });

            $scope.$on('sftp__new_upload_file', function (event, data) {
                angular.forEach(data, function (file) {
                    _this.uploadFiles.push(file);
                });
            });

            $scope.$on('sftp__progress_data', function (event, data) {
                _this.uploadFiles.filter(function (e) {
                    return e.exchange === data.exchange && e.path === data.destination && e.uuid == data.uuid;
                })[0].progress = data.progress;
            });

            this.isResumeSupported = Upload.isResumeSupported();

            /*
             * ng-click functions
             */
            this.manageCredentials = function () {
                ApplicationsFactory.openApplication('cmanager').then(function () {
                    // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                    $timeout(function () {
                        ApplicationsFactory.toggleApplication('cmanager');
                    }, 0, false);
                });
            };

            this.toggleSide = function () {
                _this.viewSide = !_this.viewSide;
            };

            this.newConnection = function () {
                _this.Form = {
                    autologin: true,
                    save: true,
                    port: 22
                };
                _this.showNewConnection = true;
                sftpFactory.setActiveConnection(null);
            };

            this.sendConnect = function (sftpConnect_form) {
                _this.sftpConnect_form.submitted = true;
                _this.Form.category = 'sftp';

                if (sftpConnect_form.$valid) {
                    _this.sftpConnect_form.submitted = false;
                    _this.showNewConnection = false;

                    // Fetch connection
                    var connection = connectionsFactory.connect(_this.Form);
                    sftpFactory.setActiveConnection(connection.uuid);
                }
            };

            this.deleteConnection = function (connection) {
                _this.activeConnection = connection.uuid;
                _this.setActiveConnection(connection);

                var modalInstanceRemoveConnection = modalFactory.openRegistredModal('question', '.window--sftp .window__main',
                    {
                        title: function () {
                            return 'Delete connection ' + (_this.getActiveConnection().description ? _this.getActiveConnection().description : _this.getActiveConnection().hostname);
                        },
                        text: function () {
                            return 'Remove the selected connection from the inventory?';
                        }
                    }
                );
                modalInstanceRemoveConnection.result.then(function (res) {
                    if (res === true) {
                        connectionsFactory.deleteConnection(connection.uuid).then(function () {
                            toastr.success('Connection deleted.', 'SFTP');
                        }).catch(function () {
                            toastr.error('Error while deleting connection.', 'SFTP');
                        });
                    }

                    _this.newConnection();

                });
            };

            this.setActiveConnection = function (connection) {
                // Is not connected
                if (connection.state !== 'connected') {
                    _this.showNewConnection = true;
                    sftpFactory.setActiveConnection(connection.uuid);
                    _this.Form = connection;

                } else if (connection.state !== 'new') {
                    console.log('not new');
                    _this.showNewConnection = false;
                    sftpFactory.setActiveConnection(connection.uuid);
                    $timeout(function () {
                        $('#server_body').focus();
                    }, 500);

                    // Not initialized connection
                } else if (connection.state === 'new') {
                    console.log('new');
                    _this.showNewConnection = true;
                    sftpFactory.setActiveConnection(connection.uuid);
                    _this.Form = connection;
                }
            };


            this.uploadFile = function (file) {
                fileSystemFactory.uploadFile(file);
            };

            this.restart = function (file) {
                _this.uploadFile(file);
            };

        }]);
}());
(function () {
    'use strict';
    sftpApp.controller('sftpBodyLocalController', ['$rootScope', '$scope', '$timeout', 'fileSystemFactory', 'Upload', 'ApplicationsFactory', 'sftpFactory', 'toastr', 'modalFactory',
        function ($rootScope, $scope, $timeout, fileSystemFactory, Upload, ApplicationsFactory, sftpFactory, toastr, modalFactory) {

        var _this = this;
        this.viewAsList = false;
        this.currentActive = 0;
        this.selection = true;
        this.cutFrom = null;
        this.copyFrom = null;
        this.pasteTo = null;
        this.lastPath = [];
        this.nextPath = [];

        // Parent scope
            /** @namespace $scope.$parent.sftpB */
            var sftpB = $scope.$parent.sftpB;

        /*
         * Init
         */

        // Get local filesystem folders
        this.localFileSystem = {
            currentPath: '/',
            currentData: ''
        };

        fileSystemFactory.getFileSystemPath('/', function (data) {
            _this.localFileSystem.currentData = data;
            $('.folders').focus();
        });

        /*
         * Bindings
         */
        $scope.$watch(function () {
            return _this.uploadFiles;
        }, function (files) {
            if (files != null) {
                // make files array for not multiple to be able to be used in ng-repeat in the ui
                if (!angular.isArray(files)) {
                    $timeout(function () {
                        _this.uploadFiles = files = [files];
                    });
                    return;
                }

                $scope.$emit('sftp__new_upload_file', _this.uploadFiles);

                // Upload each file
                for (var i = 0; i < files.length; i++) {
                    (function (f) {
                        fileSystemFactory.uploadFile(f).then(function (data) {
                            if (data.status === 'ok') {
                                _this.reloadPath();
                            }
                        });
                    })(files[i]);
                }
            }
        });

        /*
         * Current path contextmenu
         */
        this.localContextMenu = [
            {
                text: '<i class="fa fa-download"></i> Download from URL to current folder',
                click: function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                    var modalInstanceDownloadFromURL = modalFactory.openRegistredModal('input', '.window--sftp .window__main #local_body',
                        {
                            title: function () {
                                return 'Download file from URL';
                            },
                            text: function () {
                                return 'File URL';
                            },
                            button_text: function () {
                                return 'Download';
                            },
                            inputValue: function () {
                                return '';
                            }
                        }
                    );
                    modalInstanceDownloadFromURL.result.then(function (res) {

                        if (!res) return;

                        return fileSystemFactory.downloadFileFromInet(res, _this.localFileSystem.currentPath, '', function () {
                            _this.reloadPath();
                            toastr.success('File downloaded to ' + _this.localFileSystem.currentPath, 'Download file from URL');
                        });
                    });
                }
            },
            {
                text: '<i class="fa fa-folder"></i> Create Folder',
                click: function () {
                    _this.createFolder();
                }
            },
            null,
            {
                text: '<i class="fa fa-refresh"></i> Refresh',
                click: function () {
                    _this.reloadPath();
                }
            },
            null,
            [function () {
                return '<i class="fa fa-clipboard"></i> Paste';
            }, function ($itemScope) {
                if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                _this.pasteTo = _this.localFileSystem.currentPath;

                if (_this.cutFrom) {
                    return fileSystemFactory.moveFile(_this.cutFrom, _this.pasteTo, function () {
                        _this.reloadPath();
                        _this.cutFrom = null;
                        _this.pasteTo = null;
                    });
                }

                if (_this.copyFrom) {
                    return fileSystemFactory.copyFile(_this.copyFrom, _this.pasteTo, function () {
                        _this.reloadPath();
                        _this.copyFrom = null;
                        _this.pasteTo = null;
                    });
                }

            }, function () {
                if (_this.copyFrom === null && _this.cutFrom === null) return false;
                return true; // enabled = true, disabled = false
            }],
            null,
            {
                text: '<i class="fa fa-lock"></i> Permissions',
                click: function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;


                }
            }

        ];

        /*
         * File contextmenu
         */
        this.fileContextMenu = [
            {
                text: '<i class="fa fa-upload"></i> Upload to Remote',
                click: function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                    var filename = $itemScope.file.filename;
                    var serverPath = sftpB.getActiveConnection().currentPath;
                    var localPath = _this.localFileSystem.currentPath;

                    $scope.$emit('sftp__new_upload_file', [{
                        uuid: sftpB.activeConnection,
                        name: filename,
                        source: localPath + filename,
                        path: serverPath + filename,
                        size: $itemScope.file.attrs.size,
                        progress: 0,
                        exchange: 'upload'
                    }]);

                    sftpFactory.uploadFile(filename, localPath, serverPath, sftpB.activeConnection);
                }
            },
            {
                text: '<i class="fa fa-download"></i> Download to local',
                click: function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;


                }
            },
            [function ($itemScope) {
                if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                var filetype = _this.getFileType($itemScope.file.longname);

                if (filetype === 'folder') {
                    return '<i class="fa fa-folder-open"></i> Open';
                } else {
                    return '<i class="fa fa-edit"></i> Open with Notepad';
                }
            }, function ($itemScope) {
                if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;
                _this.doWithFile($itemScope.file);
            }, function () {
                // Enable or Disable
                return true; // enabled = true, disabled = false
            }],
            null,
            {
                text: '<i class="fa fa-files-o"></i> Copy',
                click: function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                    _this.cutFrom = null;
                    _this.copyFrom = _this.localFileSystem.currentPath + $itemScope.file.filename;
                }
            },
            {
                text: '<i class="fa fa-scissors"></i> Cut',
                click: function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                    _this.copyFrom = null;
                    _this.cutFrom = _this.localFileSystem.currentPath + $itemScope.file.filename;
                }
            },
            null,
            {
                text: '<i class="fa fa-font"></i> Rename',
                click: function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                    _this.fileToRename = $itemScope.file.filename;

                    var modalInstanceRenameFile = modalFactory.openRegistredModal('input', '.window--sftp .window__main #local_body #local_body',
                        {
                            title: function () {
                                return 'Rename file';
                            },
                            text: function () {
                                return 'File name';
                            },
                            button_text: function () {
                                return 'Rename';
                            },
                            inputValue: function () {
                                return $itemScope.file.filename;
                            }
                        }
                    );
                    modalInstanceRenameFile.result.then(function (res) {

                        if (!res) return;

                        _this.modalInputName = res;
                        _this.renameFile();

                    });
                }
            },
            {
                text: '<i class="fa fa-remove"></i> Delete',
                click: function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                    _this.modalInputName = $itemScope.file.filename;
                    var modalInstanceDeleteFile = modalFactory.openRegistredModal('question', '.window--sftp .window__main #local_body',
                        {
                            title: function () {
                                return 'Delete file ' + _this.modalInputName;
                            },
                            text: function () {
                                return 'Delete ' + _this.modalInputName + ' from SysOS?';
                            }
                        }
                    );
                    modalInstanceDeleteFile.result.then(function (res) {

                        if (res === true) return _this.deleteSelected();

                    });
                }
            },
            null,
            {
                text: '<i class="fa fa-lock"></i> Permissions',
                click: function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;


                }
            }
        ];

        /*
         * Get file type (folder, file...)
         */
        this.getFileType = function (longname) {
            return fileSystemFactory.getFileType(longname);
        };

        /*
         * Get all contents from given folder path
         */
        this.getFolderContents = function (newPath) {
            fileSystemFactory.getFileSystemPath(newPath, function (data) {
                _this.search = undefined;
                _this.localFileSystem.currentData = data;
                _this.localFileSystem.currentPath = newPath;
                _this.resetActive();
            });
        };

        /*
         * ng-click functions
         */

        /*
         * Checks if is a file or folder and do something
         */
        this.doWithFile = function (file) {
            var filetype = _this.getFileType(file.longname);

            if (filetype === 'folder') {
                var newPath = _this.localFileSystem.currentPath + file.filename + '/';

                // Push the actual path to lastPath array (used by goPathBack())
                _this.lastPath.push(_this.localFileSystem.currentPath);
                // Reset nextPath
                _this.nextPath = [];

                _this.getFolderContents(newPath);
                $scope.$parent.$broadcast('sftp__local_path', newPath);

            } else {
                var filePath = _this.localFileSystem.currentPath + file.filename;

                fileSystemFactory.getFileContents(filePath, function (data) {
                    ApplicationsFactory.openApplication('notepad').then(function () {
                        // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                        $timeout(function () {
                            ApplicationsFactory.toggleApplication('notepad');
                            $rootScope.$broadcast('notepad__new_data', data);
                        }, 0, false);
                    });
                });
            }
        };

        /*
         * Go to any folders by a given path
         */
        this.goToPath = function ($index) {
            var newPath = _this.localFileSystem.currentPath.split('/').splice(0, $index + 1).join('/') + '/';

            // Push the actual path to lastPath array (used by goPathBack())
            _this.lastPath.push(_this.localFileSystem.currentPath);
            // Reset nextPath
            _this.nextPath = [];

            _this.getFolderContents(newPath);
            $scope.$parent.$broadcast('sftp__local_path', newPath);
        };

        /*
         * Checks the last visited path and go to it
         */
        this.goPathBack = function () {
            if (_this.lastPath.length === 0) return;
            var newPath = _this.lastPath.pop();

            // Push the actual path to nextPath array (used by goPathForward())
            _this.nextPath.push(_this.localFileSystem.currentPath);

            _this.getFolderContents(newPath);
        };

        /*
         * If called goPathBack this function goes a path forward
         */
        this.goPathForward = function () {
            if (_this.nextPath.length === 0) return;
            var newPath = _this.nextPath.pop();

            // Push the actual path to nextPath array (used by goPathForward())
            _this.lastPath.push(_this.localFileSystem.currentPath);

            _this.getFolderContents(newPath);
        };

        /*
         * Get current path data
         */
        this.reloadPath = function () {
            if (_this.localFileSystem.currentPath === '/root/Desktop/') {
                $rootScope.$broadcast('desktop__reload');
            }

            fileSystemFactory.getFileSystemPath(_this.localFileSystem.currentPath, function (data) {
                _this.search = undefined;
                _this.localFileSystem.currentData = data;
                _this.resetActive();
            });
        };

        /*
         * Sets view mode (icons, detailed...)
         */
        this.toggleView = function () {
            _this.viewAsList = !_this.viewAsList;
            _this.resetActive();
        };

        /*
         * Creates a new folder
         */
        this.createFolder = function () {
            var modalInstanceCreateFolder = modalFactory.openRegistredModal('input', '.window--sftp .window__main #local_body',
                {
                    title: function () {
                        return 'Create new folder';
                    },
                    text: function () {
                        return 'Folder name';
                    },
                    button_text: function () {
                        return 'Create';
                    },
                    inputValue: function () {
                        return 'NewFolder';
                    }
                }
            );
            modalInstanceCreateFolder.result.then(function (res) {

                if (!res) return;

                return fileSystemFactory.createFolder(_this.localFileSystem.currentPath, res, function () {

                    _this.reloadPath();

                }).catch(function (e) {
                    console.log(e);
                });
            });
        };

        /*
         * Deletes selected files or folders
         */
        this.deleteSelected = function () {
            fileSystemFactory.deleteFile(_this.localFileSystem.currentPath, _this.modalInputName, function () {
                _this.reloadPath();
            });
        };

        /*
         * Rename file
         */
        this.renameFile = function () {
            fileSystemFactory.renameFile(_this.localFileSystem.currentPath, _this.fileToRename, _this.modalInputName, function () {
                _this.reloadPath();
            });
        };

        /*
         * Sets the fist item in the current path as active
         */
        this.resetActive = function () {
            _this.currentActive = 0;
            $('#local_body').focus();
        };

        /*
         * Sets an item file/folder active
         */
        this.setCurrentActive = function ($index) {
            $('#local_body').focus();
            $timeout.cancel(_this.selectTimeout);

            if ($index > _this.localFileSystem.currentData.length - 1) {
                _this.currentActive = 0;
            } else if ($index < 0) {
                _this.currentActive = _this.localFileSystem.currentData.length - 1;
            } else {
                _this.currentActive = $index;
            }

            _this.selection = false;
            _this.selectTimeout = $timeout(function () {
                _this.selection = true;
            }, 100);
        };

        this.handleMainFolderClick = function ($event) {

            if ($event.target.attributes.id !== undefined && $event.target.attributes.id.value === 'local_body') {
                _this.currentActive = null;
            }

        };

        /*
         * Keypress on item focus
         */
        this.handleItemKeyPress = function (keyEvent) {
            // Do nothing if some application is active
            if ($rootScope.taskbar__item_open !== 'sftp') return;

            // Do nothing if there is no active item unless its side arrows
            if (_this.currentActive === null && keyEvent.which !== 39 && keyEvent.which === 37) return;

            if (keyEvent.which === 46) {
                _this.modalInputName = _this.localFileSystem.currentData[_this.currentActive].filename;

                var modalInstanceDeleteFile = modalFactory.openRegistredModal('question', '.window--sftp .window__main #local_body',
                    {
                        title: function () {
                            return 'Delete file ' + _this.localFileSystem.currentData[_this.currentActive].filename;
                        },
                        text: function () {
                            return 'Delete ' + _this.localFileSystem.currentData[_this.currentActive].filename + ' from SysOS?';
                        }
                    }
                );
                modalInstanceDeleteFile.result.then(function (res) {

                    if (res === true) return _this.deleteSelected();

                });
            } else if (keyEvent.which === 113) {
                _this.fileToRename = _this.localFileSystem.currentData[_this.currentActive].filename;

                var modalInstanceRenameFile = modalFactory.openRegistredModal('input', '.window--sftp .window__main #local_body',
                    {
                        title: function () {
                            return 'Rename file';
                        },
                        text: function () {
                            return 'File name';
                        },
                        button_text: function () {
                            return 'Rename';
                        },
                        inputValue: function () {
                            return _this.fileToRename;
                        }
                    }
                );
                modalInstanceRenameFile.result.then(function (res) {

                    if (!res) return;

                    _this.modalInputName = res;
                    _this.renameFile();

                });
            } else if (keyEvent.which === 39) {
                if (_this.currentActive === null) return _this.currentActive = 0;
                _this.setCurrentActive(_this.currentActive + 1);
            } else if (keyEvent.which === 37) {
                if (_this.currentActive === null) return _this.currentActive = 0;
                _this.setCurrentActive(_this.currentActive - 1);
            } else if (keyEvent.which === 8) {
                _this.goPathBack();
            } else if (keyEvent.which === 13) {
                _this.doWithFile(_this.localFileSystem.currentData[_this.currentActive]);
            }
        };

    }]);
}());
(function () {
    'use strict';
    sftpApp.controller('sftpBodyServerController', ['$rootScope', '$scope', '$timeout', 'fileSystemFactory', 'sftpFactory', 'remoteFileSystemFactory', 'toastr', 'modalFactory',
        function ($rootScope, $scope, $timeout, fileSystemFactory, sftpFactory, remoteFileSystemFactory, toastr, modalFactory) {

            var _this = this;
            this.viewAsList = false;
            this.currentActive = 0;
            this.localFileSystemPath = '/';
            this.selection = true;
            this.cutFrom = null;
            this.copyFrom = null;
            this.lastPath = [];
            this.nextPath = [];

            // Parent scope
            var sftpB = $scope.$parent.$parent.sftpB;

            /*
             * Bindings
             */

            // Variable needed to know where to download a file from remoteServer
            $scope.$on('sftp__local_path', function (event, data) {
                _this.localFileSystemPath = data;
            });

            this.serverContextMenu = [
                {
                    text: '<i class="fa fa-download"></i> Download from URL to current folder',
                    click: function ($itemScope) {
                        if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                        var modalInstanceDownloadFromURL = modalFactory.openRegistredModal('input', '.window--sftp .window__main #server_body',
                            {
                                title: function () {
                                    return 'Download file from URL';
                                },
                                text: function () {
                                    return 'File URL';
                                },
                                button_text: function () {
                                    return 'Download';
                                },
                                inputValue: function () {
                                    return '';
                                }
                            }
                        );
                        modalInstanceDownloadFromURL.result.then(function (res) {

                            if (!res) return;

                            return sftpFactory.downloadFileFromInet(res, sftpB.getActiveConnection().currentPath, sftpB.activeConnection, function (data) {
                                _this.reloadPath();
                                toastr.success('File downloaded to ' + sftpB.getActiveConnection().currentPath, 'Download file from URL');
                            });

                        });
                    }
                },
                {
                    text: '<i class="fa fa-folder"></i> Create Folder',
                    click: function () {
                        _this.createFolder();
                    }
                },
                null,
                {
                    text: '<i class="fa fa-refresh"></i> Refresh',
                    click: function () {
                        _this.reloadPath();
                    }
                },
                null,
                [function () {
                    return '<i class="fa fa-clipboard"></i> Paste';
                }, function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                    _this.pasteTo = sftpB.getActiveConnection().currentPath;

                    if (_this.cutFrom) {
                        return remoteFileSystemFactory.moveFile(sftpB.activeConnection, _this.cutFrom, _this.pasteTo, function () {
                            _this.reloadPath();
                            _this.cutFrom = null;
                            _this.pasteTo = null;
                        });
                    }

                    if (_this.copyFrom) {
                        return remoteFileSystemFactory.copyFile(sftpB.activeConnection, _this.copyFrom, _this.pasteTo, function () {
                            _this.reloadPath();
                            _this.copyFrom = null;
                            _this.pasteTo = null;
                        });
                    }

                }, function () {
                    if (_this.copyFrom === null && _this.cutFrom === null) return false;
                    return true; // enabled = true, disabled = false
                }],
                null,
                {
                    text: '<i class="fa fa-lock"></i> Permissions',
                    click: function ($itemScope) {
                        if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;


                    }
                }

            ];

            this.fileContextMenu = [
                {
                    text: '<i class="fa fa-cloud-download"></i> Download to SysOS',
                    click: function ($itemScope) {

                        var filename = $itemScope.file.filename;
                        var serverPath = sftpB.getActiveConnection().currentPath;
                        var localPath = _this.localFileSystemPath;

                        $scope.$emit('sftp__new_upload_file', [{
                            uuid: sftpB.activeConnection,
                            name: filename,
                            source: serverPath + filename,
                            path: localPath + filename,
                            size: $itemScope.file.attrs.size,
                            progress: 0,
                            exchange: 'download'
                        }]);

                        sftpFactory.downloadFile(filename, localPath, serverPath, sftpB.activeConnection);

                    }
                },
                {
                    text: '<i class="fa fa-download"></i> Download to Local',
                    click: function ($itemScope, $event, modelValue, text, $li) {
                    }
                },
                [function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                    var filetype = _this.getFileType($itemScope.file.longname);

                    if (filetype === 'folder') {
                        return '<i class="fa fa-folder-open"></i> Open';
                    } else {
                        return '<i class="fa fa-edit"></i> Open with Notepad';
                    }
                }, function ($itemScope) {
                    if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;
                    _this.doWithFile($itemScope.file);
                }, function () {
                    // Enable or Disable
                    return true; // enabled = true, disabled = false
                }],
                null,
                {
                    text: '<i class="fa fa-files-o"></i> Copy',
                    click: function ($itemScope) {
                        if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                        _this.cutFrom = null;
                        _this.copyFrom = sftpB.getActiveConnection().currentPath + $itemScope.file.filename;
                    }
                },
                {
                    text: '<i class="fa fa-scissors"></i> Cut',
                    click: function ($itemScope) {
                        if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                        _this.copyFrom = null;
                        _this.cutFrom = sftpB.getActiveConnection().currentPath + $itemScope.file.filename;
                    }
                },
                null,
                {
                    text: '<i class="fa fa-font"></i> Rename',
                    click: function ($itemScope) {
                        if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                        _this.fileToRename = $itemScope.file.filename;

                        var modalInstanceRenameFile = modalFactory.openRegistredModal('input', '.window--sftp .window__main #server_body',
                            {
                                title: function () {
                                    return 'Rename file';
                                },
                                text: function () {
                                    return 'File name';
                                },
                                button_text: function () {
                                    return 'Rename';
                                },
                                inputValue: function () {
                                    return $itemScope.file.filename;
                                }
                            }
                        );
                        modalInstanceRenameFile.result.then(function (res) {

                            if (!res) return;

                            _this.modalInputName = res;
                            _this.renameFile();

                        });
                    }
                },
                {
                    text: '<i class="fa fa-remove"></i> Delete',
                    click: function ($itemScope) {
                        if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;

                        _this.modalInputName = $itemScope.file.filename;
                        var modalInstanceDeleteFile = modalFactory.openRegistredModal('question', '.window--sftp .window__main #server_body',
                            {
                                title: function () {
                                    return 'Delete file ' + _this.modalInputName;
                                },
                                text: function () {
                                    return 'Delete ' + _this.modalInputName + ' from SysOS?';
                                }
                            }
                        );
                        modalInstanceDeleteFile.result.then(function (res) {

                            if (res === true) return _this.deleteSelected();

                        });
                    }
                },
                null,
                {
                    text: '<i class="fa fa-lock"></i> Permissions',
                    click: function ($itemScope) {
                        if (angular.isUndefined($itemScope.file)) $itemScope.file = $itemScope.$parent.file;


                    }
                }
            ];

            this.getFileType = function (longname) {
                return fileSystemFactory.getFileType(longname);
            };

            /*
             * ng-click functions
             */
            this.doWithFile = function (file) {
                var currentPath = sftpB.getActiveConnection().currentPath;
                _this.search = undefined;
                var fileType = sftpFactory.doWithFile(file, sftpB.activeConnection);

                if (fileType === 'folder') {
                    // Push the actual path to lastPath array (used by goPathBack())
                    _this.lastPath.push(currentPath);
                    // Reset nextPath
                    _this.nextPath = [];
                }

                _this.resetActive();
            };

            this.goToPath = function ($index, fullPath) {
                var path;

                if ($index === false && fullPath) {
                    // This is called ONLY from goPathBack or goPathForward
                    path = fullPath;

                    sftpFactory.goToPath(path, sftpB.activeConnection);

                    _this.resetActive();
                } else {
                    path = sftpB.getActiveConnection().currentPath.split('/').splice(0, $index + 1).join('/') + '/';

                    // Do nothing if path is the same as current path
                    if (path === sftpB.getActiveConnection().currentPath) return;

                    sftpFactory.goToPath(path, sftpB.activeConnection);

                    // Push the actual path to lastPath array (used by goPathBack())
                    _this.lastPath.push(path);
                    // Reset nextPath
                    _this.nextPath = [];

                    _this.resetActive();
                }
            };

            /*
             * Checks the last visited path and go to it
             */
            this.goPathBack = function () {
                if (_this.lastPath.length === 0) return;
                var currentPath = sftpB.getActiveConnection().currentPath;
                var newPath = _this.lastPath.pop();

                // Push the actual path to nextPath array (used by goPathForward())
                _this.nextPath.push(currentPath);

                _this.search = undefined;
                _this.goToPath(false, newPath);
                _this.resetActive();
            };

            /*
             * If called goPathBack this function goes a path forward
             */
            this.goPathForward = function () {
                if (_this.nextPath.length === 0) return;
                var currentPath = sftpB.getActiveConnection().currentPath;
                var newPath = _this.nextPath.pop();

                // Push the actual path to nextPath array (used by goPathForward())
                _this.lastPath.push(currentPath);

                _this.search = undefined;
                _this.goToPath(false, newPath);
                _this.resetActive();
            };

            this.reloadPath = function () {
                var path = sftpB.getActiveConnection().currentPath;
                sftpFactory.goToPath(path, sftpB.activeConnection);
                _this.resetActive();
            };

            this.createFolder = function () {
                var modalInstanceCreateFolder = modalFactory.openRegistredModal('input', '.window--sftp .window__main #server_body',
                    {
                        title: function () {
                            return 'Create new folder';
                        },
                        text: function () {
                            return 'Folder name';
                        },
                        button_text: function () {
                            return 'Create';
                        },
                        inputValue: function () {
                            return 'NewFolder';
                        }
                    }
                );
                modalInstanceCreateFolder.result.then(function (res) {

                    if (!res) return;

                    var serverPath = sftpB.getActiveConnection().currentPath;
                    sftpFactory.createFolder(serverPath + res, sftpB.activeConnection);
                });
            };

            this.toggleView = function () {
                _this.viewAsList = !_this.viewAsList;
                _this.resetActive();
            };

            this.deleteSelected = function () {
                var serverPath = sftpB.getActiveConnection().currentPath;

                sftpFactory.deleteFile(_this.modalInputName, serverPath, sftpB.activeConnection);
            };

            /*
             * Rename file
             */
            this.renameFile = function () {
                var serverPath = sftpB.getActiveConnection().currentPath;

                sftpFactory.renameFile(_this.fileToRename, _this.modalInputName, serverPath, sftpB.activeConnection);
            };

            this.resetActive = function () {
                _this.currentActive = 0;
                $('#server_body').focus();
            };

            // Sets an item file/folder active
            this.setCurrentActive = function ($index) {
                $('#server_body').focus();
                $timeout.cancel(_this.selectTimeout);

                if ($index > sftpB.getActiveConnection().currentData.length - 1) {
                    _this.currentActive = 0;
                } else if ($index < 0) {
                    _this.currentActive = sftpB.getActiveConnection().currentData.length - 1;
                } else {
                    _this.currentActive = $index;
                }

                _this.selection = false;
                _this.selectTimeout = $timeout(function () {
                    _this.selection = true;
                }, 100);
            };

            this.handleMainFolderClick = function ($event) {

                if ($event.target.attributes.id !== undefined && $event.target.attributes.id.value === 'server_body') {
                    _this.currentActive = null;
                }

            };

            /*
             * Keypress on item focus
             */
            this.handleItemKeyPress = function (keyEvent) {
                // Do nothing if some application is active
                if ($rootScope.taskbar__item_open !== 'sftp') return;

                // Do nothing if there is no active item unless its side arrows
                if (_this.currentActive === null && keyEvent.which !== 39 && keyEvent.which === 37) return;

                if (keyEvent.which === 46) {
                    _this.modalInputName = sftpB.getActiveConnection().currentData[_this.currentActive].filename;

                    var modalInstanceDeleteFile = modalFactory.openRegistredModal('question', '.window--sftp .window__main #server_body',
                        {
                            title: function () {
                                return 'Delete file ' + _this.modalInputName;
                            },
                            text: function () {
                                return 'Delete ' + _this.modalInputName + ' from SysOS?';
                            }
                        }
                    );
                    modalInstanceDeleteFile.result.then(function (res) {

                        if (res === true) return _this.deleteSelected();

                    });
                } else if (keyEvent.which === 113) {
                    _this.fileToRename = sftpB.getActiveConnection().currentData[_this.currentActive].filename;

                    var modalInstanceRenameFile = modalFactory.openRegistredModal('input', '.window--sftp .window__main #server_body',
                        {
                            title: function () {
                                return 'Rename file';
                            },
                            text: function () {
                                return 'File name';
                            },
                            button_text: function () {
                                return 'Rename';
                            },
                            inputValue: function () {
                                return _this.fileToRename;
                            }
                        }
                    );
                    modalInstanceRenameFile.result.then(function (res) {

                        if (!res) return;

                        _this.modalInputName = res;
                        _this.renameFile();

                    });
                } else if (keyEvent.which === 39) {
                    if (_this.currentActive === null) _this.currentActive = 0;
                    _this.setCurrentActive(_this.currentActive + 1);
                } else if (keyEvent.which === 37) {
                    if (_this.currentActive === null) _this.currentActive = 0;
                    _this.setCurrentActive(_this.currentActive - 1);
                } else if (keyEvent.which === 8) {
                    _this.goPathBack();
                } else if (keyEvent.which === 13) {
                    _this.doWithFile(sftpB.getActiveConnection().currentData[_this.currentActive]);
                }
            };

        }]);
}());
(function () {
    'use strict';
    sftpApp.controller('sftpStatusController', ['$scope', 'sftpFactory', 'connectionsFactory', function ($scope, sftpFactory, connectionsFactory) {

        var _this = this;

        /*
         * Bindings
         */
        $scope.$watch(function () {
            return sftpFactory.activeConnection();
        }, function (newValue) {
            _this.activeConnection = newValue;
        });

        this.getActiveConnection = function () {
            if (!_this.activeConnection) return null;

            return connectionsFactory.getConnectionByUuid(_this.activeConnection);
        };

    }]);
}());
(function () {
    'use strict';
    sftpApp.factory('sftpFactory', ['socketIo', 'fileSystemFactory', 'remoteFileSystemFactory', '$rootScope', 'toastr', 'connectionsFactory',
        function (socketIo, fileSystemFactory, remoteFileSystemFactory, $rootScope, toastr, connectionsFactory) {

            // Private
            var activeConnection = null;

            // Public

            var newData = function (data) {
                connectionsFactory.getConnectionByUuid(data.uuid).currentPath = data.path;
                connectionsFactory.getConnectionByUuid(data.uuid).currentData = data.text;
            };

            var newProp = function (data) {
                connectionsFactory.getConnectionByUuid(data.uuid)[data.prop] = data.text;

                // CONN CLOSE
                if (data.prop === 'status' && data.text === 'CONN CLOSE') {
                    connectionsFactory.getConnectionByUuid(data.uuid).state = 'disconnected';

                    // CON ERROR
                } else if (data.prop === 'status' && data.text !== 'SSH CONNECTION ESTABLISHED') {

                    // Error connecting
                    if (connectionsFactory.getConnectionByUuid(data.uuid).state === 'new') {
                        connectionsFactory.getConnectionByUuid(data.uuid).state = 'disconnected';
                    }
                    connectionsFactory.getConnectionByUuid(data.uuid).error = data.text;
                    toastr.error(data.text, 'Error (' + connectionsFactory.getConnectionByUuid(data.uuid).host + ')');

                    // CONN OK
                } else if (data.text === 'SSH CONNECTION ESTABLISHED') {
                    connectionsFactory.getConnectionByUuid(data.uuid).state = 'connected';
                    connectionsFactory.getConnectionByUuid(data.uuid).error = null;
                    toastr.success(data.text, 'Connected (' + connectionsFactory.getConnectionByUuid(data.uuid).host + ')');
                    $('#server_body').focus();
                }
            };

            // Called directly from app.js by socket.io Upload/download file
            var newProgress = function (data) {
                $rootScope.$broadcast('sftp__progress_data', data);
            };

            var doWithFile = function (file, uuid) {
                var fileType = fileSystemFactory.getFileType(file.longname);

                if (fileType === 'folder') {
                    goToPath(connectionsFactory.getConnectionByUuid(uuid).currentPath + file.filename + '/', uuid);
                }

                return fileType;
            };

            var goToPath = function (path, uuid) {
                return remoteFileSystemFactory.getPath(uuid, path, function (data) {
                    connectionsFactory.getConnectionByUuid(data.uuid).currentPath = data.type;
                    connectionsFactory.getConnectionByUuid(data.uuid).currentData = data.data;
                });
            };

            var createFolder = function (path, currentConnection) {
                return remoteFileSystemFactory.createFolder(currentConnection, path, function (data) {
                    connectionsFactory.getConnectionByUuid(data.uuid).currentPath = data.type;
                    connectionsFactory.getConnectionByUuid(data.uuid).currentData = data.data;
                });
            };

            var downloadFileFromInet = function (url, currentPath, currentConnection, callback) {
                return remoteFileSystemFactory.downloadFileFromInet(url, currentPath, currentConnection, function (data) {
                    callback(data);
                });
            };

            var deleteFile = function (filename, serverPath, currentConnection) {
                return remoteFileSystemFactory.deleteFile(currentConnection, serverPath + filename, function (data) {
                    connectionsFactory.getConnectionByUuid(data.uuid).currentPath = data.type;
                    connectionsFactory.getConnectionByUuid(data.uuid).currentData = data.data;
                });
            };

            var renameFile = function (fileToRename, filename, serverPath, currentConnection) {
                return remoteFileSystemFactory.renameFile(currentConnection, serverPath + fileToRename, serverPath + filename, function (data) {
                    connectionsFactory.getConnectionByUuid(data.uuid).currentPath = data.type;
                    connectionsFactory.getConnectionByUuid(data.uuid).currentData = data.data;
                });
            };

            var uploadFile = function (filename, localPath, serverPath, currentConnection) {
                socketIo.socket().emit('sftp_session__file_upload', localPath + filename, serverPath + filename, currentConnection);
            };

            var downloadFile = function (filename, localPath, serverPath, currentConnection) {
                socketIo.socket().emit('sftp_session__file_download', localPath + filename, serverPath + filename, currentConnection);
            };

            return {
                newData: newData,
                newProp: newProp,
                newProgress: newProgress,
                doWithFile: doWithFile,
                goToPath: goToPath,
                createFolder: createFolder,
                downloadFileFromInet: downloadFileFromInet,
                deleteFile: deleteFile,
                renameFile: renameFile,
                uploadFile: uploadFile,
                downloadFile: downloadFile,
                setActiveConnection: function (uuid) {
                    activeConnection = uuid;
                },
                activeConnection: function () {
                    return activeConnection;
                }
            };
        }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/actions-sftp-explorer-local.html',
            '<div class="window__actions"> \
              <span class="fa-stack" ng-click="sftpBL.createFolder();"> \
                <i class="fa fa-folder fa-stack-1x"></i> \
                <i class="fa fa-plus fa-pull-right fa-stack-1x text-success"></i> \
              </span> \
              <a class="window__item" ng-click="sftpBL.toggleView()"> \
                <i class="fa fa-list"></i> \
              </a> \
              <a class="window__item separator"></a> \
              <a class="window__back" ng-click="sftpBL.goPathBack()"> \
                <i class="fa fa-arrow-left"></i> \
              </a> \
              <a class="window__forward" ng-click="sftpBL.goPathForward()"> \
                <i class="fa fa-arrow-right"></i> \
              </a> \
              <a class="window__item" ng-click="sftpBL.reloadPath()"> \
                <i class="fa fa-refresh"></i> \
              </a> \
              <div class="window__path"> \
                <a  ng-click="sftpBL.goToPath(null)"> \
                  <i class="fa fa-desktop"></i> \
                  SysOS / \
                </a> \
                <a  ng-repeat="path in sftpBL.localFileSystem.currentPath.split(\'/\') track by $index" ng-if="path.length != 0" ng-click="sftpBL.goToPath($index, path)"> \
                  {{::path}} \
                </a> \
              </div> \
              <form class="search"> \
                <input type="text" class="search__input" placeholder="Search files" ng-model="sftpBL.search.filename"> \
                <button class="search__btn"> \
                </button> \
              </form> \
            </div>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/actions-sftp-explorer-server.html',
            '<div class="window__actions"> \
              <span class="fa-stack" ng-click="sftpBS.createFolder();"> \
                <i class="fa fa-folder fa-stack-1x"></i> \
                <i class="fa fa-plus fa-pull-right fa-stack-1x text-success"></i> \
              </span> \
              <a class="window__item" ng-click="sftpBS.toggleView()"> \
                <i class="fa fa-list"></i> \
              </a> \
              <a class="window__item"> \
                <i class="fa fa-terminal"></i> \
              </a> \
              <a class="window__item separator"></a> \
              <a class="window__back" ng-click="sftpBS.goPathBack()"> \
                <i class="fa fa-arrow-left"></i> \
              </a> \
              <a class="window__forward" ng-click="sftpBS.goPathForward()"> \
                <i class="fa fa-arrow-right"></i> \
              </a> \
              <a class="window__item" ng-click="sftpBS.reloadPath()"> \
                <i class="fa fa-refresh"></i> \
              </a> \
              <div class="window__path"> \
                <a  ng-click="sftpBS.goToPath(false, \'/\')"> \
                  <i class="fa fa-desktop"></i> \
                  Server / \
                </a> \
                <a ng-repeat="path in sftpB.getActiveConnection().currentPath.split(\'/\') track by $index" ng-if="path.length != 0" ng-click="sftpBS.goToPath($index)"> \
                  {{::path}} \
                </a> \
              </div> \
              <form class="search"> \
                <input type="text" class="search__input" placeholder="Search files" ng-model="sftpBS.search.filename"> \
                <button class="search__btn"> \
                </button> \
              </form> \
            </div>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/actions-sftp.html',
            '<div class="window__actions" ng-controller="sftpActionController as sftpA"> \
              <a class="window__item"  ng-click="sftpA.newConnection()"> \
                <i class="fa fa-plus text-success"></i> \
              </a> \
              <a class="window__item separator" ></a> \
              <a class="window__item"  title="Edit connection" ng-click="sftpA.editConnection()"> \
                <i class="fa fa-edit" ng-class="{\'text-primary\': sftpA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="Disconnect" ng-click="sftpA.disconnectConnection()"> \
                <i class="fa fa-close" ng-class="{\'text-danger\': sftpA.activeConnection != null && sftpA.getActiveConnection().state == \'connected\'}"></i> \
              </a> \
              <a class="window__item" title="Delete" ng-click="sftpA.deleteConnection()"> \
                <i class="fa fa-trash" ng-class="{\'text-danger\': sftpA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item separator" ></a> \
              <a class="window__item"  ng-click="sftpA.toggleExchange()"> \
                <i class="fa fa-exchange" ng-class="{\'text-danger\': sftpA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item separator" ></a> \
            </div>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/body-sftp.html',
            '<div class="window__body with_status" ng-controller="sftpBodyController as sftpB"> \
              <div class="window__side" ng-if="sftpB.viewSide"> \
                <div class="menu__item" ng-repeat="connection in sftpB.connections track by $index" ng-class="{\'active\': connection.uuid == sftpB.activeConnection}" ng-click="sftpB.setActiveConnection(connection)" ng-if="connection != undefined"> \
                  <h5> \
                    {{::connection.description}} <small>({{::connection.host}})</small> \
                    <i class="fa fa-circle pull-right m-t-f" ng-class="{\'text-danger\': connection.state == \'disconnected\', \'text-success\': connection.state == \'connected\'}"></i> \
                  </h5> \
                </div> \
                <div class="secondary-content__new__box__toggle pointer"> \
                  <div class="secondary-content__new__box__toggle__slide" ng-click="sftpB.toggleSide()"> \
                    <i class="fa fa-arrow-left sidebar-open-font open-sidebar"></i> \
                  </div> \
                </div> \
              </div> \
              <div class="secondary-content__new__box__toggle toggle_left pointer" ng-if="!sftpB.viewSide" ng-click="sftpB.toggleSide()"> \
                <i class="fa fa-arrow-right sidebar-open-font open-sidebar"></i> \
              </div> \
              <div class="window__main no_padding"> \
                <div class="col-xs-6 ftp__body" ng-controller="sftpBodyLocalController as sftpBL"  ng-class="{\'with__stats\': sftpB.viewExchange == true}"> \
                  <div ng-include="\'templates/applications/actions-sftp-explorer-local.html\'" include-replace></div> \
                  <div id="local_body" selectable="sftpBL.selection" selectable-list="sftpBL.localFileSystem.currentData | filter:sftpBL.search" selectable-out="selected" selectable-options="{delay:150, filter: \'a\'}" minus-index="2" class="folders" tabindex="0" ng-click="sftpBL.handleMainFolderClick($event)" ng-keydown="sftpBL.handleItemKeyPress($event)" context-menu="sftpBL.localContextMenu"> \
                    <div ng-include="\'templates/applications/folders-modal-sftp-local.html\'"></div> \
                    <div ng-include="\'templates/applications/folders-dropzone-sftp-local.html\'"></div> \
                    <a ng-if="sftpBL.viewAsList == false"  ng-repeat="file in sftpBL.localFileSystem.currentData | filter:sftpBL.search" ng-class="{\'active\': sftpBL.currentActive == $index}" ng-click="sftpBL.setCurrentActive($index)" ng-dblclick="sftpBL.doWithFile(file)" title="{{::file.filename}}" context-menu="sftpBL.fileContextMenu"> \
                      <i class="fa fa-{{::sftpBL.getFileType(file.longname)}}"></i> \
                      <span>{{::file.filename}}</span> \
                    </a> \
                    <table ng-if="sftpBL.viewAsList == true" class="table table-hover"> \
                      <thead> \
                        <tr> \
                          <th>Name</th> \
                          <th>Size</th> \
                          <th>Type</th> \
                        </tr> \
                        </thead> \
                        <tbody> \
                        <tr ng-repeat="file in sftpBL.localFileSystem.currentData | filter:sftpBL.search" ng-class="{\'active\': sftpBL.currentActive == $index}" ng-click="sftpBL.setCurrentActive($index)" ng-dblclick="sftpBL.doWithFile(file)" title="{{::file.filename}}" context-menu="sftpBL.fileContextMenu"> \
                          <td><i class="fa fa-{{::sftpBL.getFileType(file.longname)}}"></i> {{::file.filename}}</td> \
                          <td>{{::file.attrs.size}}</td> \
                          <td>{{::sftpBL.getFileType(file.longname)}}</td> \
                        </tr> \
                      </tbody> \
                    </table> \
                  </div> \
                </div> \
                <div class="col-xs-6 ftp__body last" ng-class="{\'with__stats\': sftpB.viewExchange == true}"> \
                  <div ng-if="sftpB.showNewConnection != true && sftpB.getActiveConnection().state != \'disconnected\'" ng-controller="sftpBodyServerController as sftpBS"> \
                    <div ng-include="\'templates/applications/actions-sftp-explorer-server.html\'" include-replace></div> \
                    <div id="server_body" selectable="sftpBS.selection" selectable-list="sftpB.getActiveConnection().currentData | filter:sftpBS.search" selectable-out="selected" selectable-options="{delay:150, filter: \'a\'}" minus-index="1" class="folders" tabindex="1" ng-click="sftpBS.handleMainFolderClick($event)" ng-keydown="sftpBS.handleItemKeyPress($event)" context-menu="sftpBS.serverContextMenu"> \
                      <div ng-include="\'templates/applications/folders-modal-sftp-server.html\'"></div> \
                      <a ng-if="sftpBS.viewAsList == false"  ng-repeat="file in sftpB.getActiveConnection().currentData | filter:sftpBS.search" ng-class="{\'active\': sftpBS.currentActive == $index}" ng-click="sftpBS.setCurrentActive($index)" ng-dblclick="sftpBS.doWithFile(file)" title="{{::file.filename}}" context-menu="sftpBS.fileContextMenu"> \
                        <i class="fa fa-{{::sftpBS.getFileType(file.longname)}}"></i> \
                        <span>{{::file.filename}}</span> \
                      </a> \
                      <table ng-if="sftpBS.viewAsList == true" class="table table-hover"> \
                        <thead> \
                          <tr> \
                            <th>Name</th> \
                            <th>Size</th> \
                            <th>Type</th> \
                          </tr> \
                        </thead> \
                        <tbody> \
                        <tr ng-repeat="file in sftpB.getActiveConnection().currentData | filter:sftpBS.search" ng-class="{\'active\': sftpBS.currentActive == $index}" ng-click="sftpBS.setCurrentActive($index)" ng-dblclick="sftpBS.doWithFile(file)" title="{{::file.filename}}" context-menu="sftpBS.fileContextMenu"> \
                          <td><i class="fa fa-{{::sftpBS.getFileType(file.longname)}}"></i> {{::file.filename}}</td> \
                          <td>{{::file.attrs.size}}</td> \
                          <td>{{::sftpBS.getFileType(file.longname)}}</td> \
                        </tr> \
                      </tbody> \
                    </table> \
                    </div> \
                  </div> \
                  <div ng-if="sftpB.showNewConnection == true || sftpB.getActiveConnection().state == \'disconnected\'"> \
                    <div ng-include="\'templates/applications/new-connection-sftp.html\'" include-replace></div> \
                  </div> \
                </div> \
                <div class="window__main__stats" ng-if="sftpB.viewExchange == true"> \
                  <div ng-include="\'templates/applications/exchange-sftp.html\'" include-replace></div> \
                </div> \
              </div> \
            </div>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/exchange-sftp.html',
            '<table class="table table-hover table-elipsis"> \
              <thead> \
                <tr> \
                  <th>#</th> \
                  <th>Exchange</th> \
                  <th>Source</th> \
                  <th>Destination</th> \
                  <th>Size</th> \
                  <th>Status</th> \
                  <th>Actions</th> \
                </tr> \
              </thead> \
              <tbody> \
                <tr ng-if="!sftpB.uploadFiles"><td colspan="7" class="center">No recent transactions.</td></tr> \
                <tr ng-repeat="f in sftpB.uploadFiles"> \
                  <td>{{::$index + 1}}</td> \
                  <td ng-if="!f.exchange">Local to SysOS</td> \
                  <td ng-if="f.exchange == \'upload\'">SysOS to Server</td> \
                  <td ng-if="f.exchange == \'download\'">Server to SysOS</td> \
                  <td ng-if="!f.source" title="Local device">Local device</td> \
                  <td ng-if="f.source" title="{{::f.source}}">{{::f.source}}</td> \
                  <td ng-if="f.path" title="/{{::f.path}}">/{{::f.path}}</td> \
                  <td ng-if="!f.path" title="/{{::f.name}}">/{{::f.name}}</td> \
                  <td>{{::f.size}}</td> \
                  <td> \
                    <span class="progress" ng-show="f.progress >= 0"> \
                      <div style="width:{{f.progress}}%">{{f.progress}}%</div> \
                    </span> \
                  </td> \
                  <td class="text-navy"> \
                    <button class="btn btn-xs" ng-click="f.upload.abort();f.upload.aborted=true" ng-show="f.upload != null && f.progress < 100 && !f.upload.aborted"> \
                      Abort<span ng-show="sftpB.isResumeSupported">/Pause</span> \
                    </button> \
                    <button class="btn btn-xs" ng-click="sftpB.uploadFile(f);f.upload.aborted=false" ng-show="sftpB.isResumeSupported && f.upload != null && f.upload.aborted">Resume</button> \
                    <button class="btn btn-xs" ng-click="sftpB.restart(f);f.upload.aborted=false" ng-show="sftpB.isResumeSupported && f.upload != null && (f.progress == 100 || f.upload.aborted)">Restart</button> \
                  </td> \
                </tr> \
              </tbody> \
            </table>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/folders-dropzone-sftp-local.html',
            '<div class="dropzone" ngf-drop ngf-select \
            ng-model="sftpBL.uploadFiles" \
            ngf-model-options="{debounce:100}" \
            ngf-multiple="true" \
            ngf-drag-over-class="{dragover}" \
            ngf-allow-dir="true"  \
            ngf-drop-available="true"> \
              Drop files here (from local system) or click to upload. \
            </div>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/folders-modal-sftp-local.html',
            '<div class="folders-modal" ng-if="sftpBL.showModal" ng-switch="sftpBL.modalType"> \
              <h3>{{sftpBL.modalType}}</h3> \
              <input ng-switch-when="Download from url" type="text" class="form-control" set-focus ng-model="sftpBL.fileUrl" placeholder="Enter url" ng-keydown="sftpBL.handleKeyPress($event)"> \
              <input ng-switch-when="Rename" type="text" class="form-control" set-focus ng-model="sftpBL.modalInputName" placeholder="Enter new name" ng-keydown="sftpBL.handleKeyPress($event)"> \
              <input ng-switch-when="Create Folder" type="text" class="form-control" set-focus ng-model="sftpBL.modalInputName" placeholder="Enter folder Name" ng-keydown="sftpBL.handleKeyPress($event)"> \
              <div ng-switch-when="Delete File"> \
                <span>Delete confirmation for file {{sftpBL.modalInputName}}</span><br /> \
                <button type="button" class="btn btn-primary" set-focus ng-keydown="sftpBL.handleKeyPress($event)" ng-click="sftpBL.deleteSelected()">Delete</button> \
                <button type="button" class="btn" ng-click="sftpBL.showModal = !sftpBL.showModal; sftpBL.resetActive()">Cancel</button> \
              </div> \
            </div>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/folders-modal-sftp-server.html',
            '<div class="folders-modal" ng-if="sftpBS.showModal" ng-switch="sftpBS.modalType"> \
              <h3>{{sftpBS.modalType}}</h3> \
              <input ng-switch-when="Download from url" type="text" class="form-control" set-focus ng-model="sftpBS.fileUrl" placeholder="Enter url" ng-keydown="sftpBS.handleKeyPress($event)"> \
              <input ng-switch-when="Rename" type="text" class="form-control" set-focus ng-model="sftpBS.modalInputName" placeholder="Enter new name" ng-keydown="sftpBS.handleKeyPress($event)"> \
              <input ng-switch-when="Create Folder" type="text" class="form-control" set-focus ng-model="sftpBS.modalInputName" placeholder="Enter folder Name" ng-keydown="sftpBS.handleKeyPress($event)"> \
              <div ng-switch-when="Delete File"> \
                <span>Delete confirmation for file {{sftpBS.modalInputName}}</span><br /> \
                <button type="button" class="btn btn-primary" set-focus ng-keydown="sftpBS.handleKeyPress($event)" ng-click="sftpBS.deleteSelected()">Delete</button> \
                <button type="button" class="btn" ng-click="sftpBS.showModal = !sftpBS.showModal; sftpBS.resetActive()">Cancel</button> \
              </div> \
            </div>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/menu-sftp.html',
            '<li> \
          <a > \
            <i class="menu__icon fa fa-download"></i> \
            Save \
          </a> \
        </li> \
        <li> \
          <a > \
            <i class="menu__icon fa fa-folder-open"></i> \
            Open \
          </a> \
        </li> \
        <li> \
          <a > \
            <i class="menu__icon fa fa-print"></i> \
            Print \
          </a> \
        </li> \
        <li> \
          <a > \
            <i class="menu__icon fa fa-share-alt"></i> \
            Share \
          </a> \
        </li> \
        <li class="divided"> \
          <a > \
            <i class="menu__icon fa fa-file"></i> \
            Format \
          </a> \
        </li> \
        <li> \
            <a > \
              <i class="menu__icon fa fa-cog"></i> \
              Settings \
          </a> \
        </li>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/new-connection-sftp.html',
            '<form class="main_form form-horizontal" name="sftpConnect_form" ng-submit="sftpB.sendConnect(sftpConnect_form)"> \
              <div class="form-group"> \
                <div class="col-sm-12"> \
                  <input type="text" class="form-control" name="inputDescription" placeholder="Description" ng-model="sftpB.Form.description"> \
                </div> \
              </div> \
              <div class="form-group"> \
                <div class="col-sm-12"> \
                  <input type="text" class="form-control" name="inputHost" placeholder="Host" ng-model="sftpB.Form.host" required> \
                </div> \
                <div class="col-sm-12" ng-show="sftpConnect_form.inputHost.$invalid && sftpB.sftpConnect_form.submitted"> \
                  <small class="text-danger pull-left" ng-show="sftpConnect_form.inputHost.$error.required">Please insert a host</small> \
                </div> \
              </div> \
              <div class="form-group"> \
                <div class="col-sm-12"> \
                  <select class="form-control" ng-options="credential.uuid as credential.description + \' - \' + credential.username for credential in sftpB.credentials" ng-model="sftpB.Form.credential"> \
                    <option value="">-- Select Credential --</option> \
                  </select> \
                </div> \
                <div class="col-sm-12"> \
                  <small class="pull-left text-primary cursor-pointer" ng-click="sftpB.manageCredentials();">Manage Credentials</small> \
                </div> \
              </div> \
              <div class="form-group"> \
                <div class="col-sm-12"> \
                    Save Connection in config file \
                    <switch class="pull-right" name="save" ng-model="sftpB.Form.save" on="on" off="off"></switch> \
                </div> \
            </div> \
            <div class="form-group" ng-if="sftpB.Form.save"> \
                <div class="col-sm-12"> \
                    Auto Login \
                    <switch class="pull-right" name="autologin" ng-model="sftpB.Form.autologin" on="on" off="off"></switch> \
                </div> \
            </div> \
              <div> \
                <button type="button" class="btn btn-default" ng-if="sftpB.Form.save">Save</button> \
                <button type="submit" class="btn btn-primary">Connect</button> \
              </div> \
            </form>'
        );

    }]);
}());
(function () {
    'use strict';
    sftpApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/status-sftp.html',
            '<div class="window__status" ng-controller="sftpStatusController as sftpS"> \
              <span class="pull-left text-muted" ng-if="!sftpS.getActiveConnection().footer">{{sftpS.getActiveConnection().host}}</span> \
              <span class="pull-left text-muted" ng-if="sftpS.getActiveConnection().footer">{{sftpS.getActiveConnection().footer}}</span> \
              <span class="pull-right text-success" ng-if="!sftpS.getActiveConnection().error">{{sftpS.getActiveConnection().status}}</span> \
              <span class="pull-right text-danger" ng-if="sftpS.getActiveConnection().error">{{sftpS.getActiveConnection().error}}</span> \
            </div>'
        );

    }]);
}());
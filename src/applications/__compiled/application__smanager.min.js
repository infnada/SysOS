/**
Systems OS - 0.0.1

Copyright (c) 2018 Isart Navarro Farell
License: MIT
*/
var smanagerApp = angular.module('smanagerApp', []);

(function () {
    'use strict';
    smanagerApp.run(['ApplicationsFactory', 'ServerFactory', 'connectionsFactory', 'smanagerFactory', 'modalFactory',
        function (ApplicationsFactory, ServerFactory, connectionsFactory, smanagerFactory, modalFactory) {

            ApplicationsFactory.registerApplication({
                id: 'smanager',
                ico: 'server',
                name: 'Server Manager',
                menu: true,
                actions: true,
                status: true,
                style: 'width:1700px;height:750px;top:8%;left:7%;'
            });

            // Get servers infrastructure
            ServerFactory
            .getConfigFile('applications/smanager/config.json', function (data) {
                return connectionsFactory.setSavedConnections(data.data);
            }, function (data) {
                console.log('Error');
            });

            // Get servers mapping
            ServerFactory
            .getConfigFile('applications/smanager/map.json', function (data) {
                return connectionsFactory.setUuidMap(data.data);
            }, function (data) {
                console.log('Error');
            });

            // Get servers mapping
            ServerFactory
            .getConfigFile('applications/smanager/links.json', function (data) {
                return smanagerFactory.setLinks(data.data);
            }, function (data) {
                console.log('Error');
            });

        }]);
}());

(function () {
    'use strict';
    smanagerApp.controller('smActionController', ['$scope', '$timeout', 'smanagerFactory', 'connectionsFactory', 'ApplicationsFactory', function ($scope, $timeout, smanagerFactory, connectionsFactory, ApplicationsFactory) {

        var _this = this;
        var APPscope = $scope.$parent.$parent.$parent.$parent;

        /*
         * Bindings
         */
        $scope.$watch(function () {
            return connectionsFactory.connections();
        }, function (newValue) {
            _this.connections = newValue;
        });

        $scope.$watch(function () {
            return smanagerFactory.activeConnection();
        }, function (newValue) {
            _this.activeConnection = newValue;
        });

        /*
         * ng-click functions
         */
        this.newConnection = function () {
            APPscope.$broadcast('smanager__new_connection');
        };

        this.configureConnection = function () {
            if (_this.activeConnection == null) return;
            APPscope.$broadcast('smanager__configure_connection');
        };

        this.disconnectConnection = function () {
            if (_this.activeConnection == null) return;
            APPscope.$broadcast('smanager__disconnect_connection');
        };

        this.deleteConnection = function () {
            if (_this.activeConnection == null) return;
            APPscope.$broadcast('smanager__delete_connection');
        };

        this.runHIDS = function () {
            if (_this.activeConnection == null) return;
            APPscope.$broadcast('smanager__run_HIDS');
        };

        this.remoteRefresh = function () {
            if (_this.activeConnection == null) return;
            APPscope.$broadcast('smanager__remote_refresh');
        };

        this.editConnection = function () {
            if (_this.activeConnection == null) return;
            APPscope.$broadcast('smanager__connection_edit');
        };

        this.openWithApp = function (app) {
            if (_this.activeConnection == null) return;

            ApplicationsFactory.openApplication(app).then(function () {
                // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                $timeout(function () {
                    ApplicationsFactory.toggleApplication(app);
                }, 0, false);
            });
        };

    }]);
}());

(function () {
    'use strict';
    smanagerApp.controller('smBodyController', ['$rootScope', '$scope', '$log', '$interval', '$timeout', 'smanagerFactory', 'connectionsFactory', 'cmanagerFactory', 'ServerFactory', 'ApplicationsFactory', 'modalFactory', '$filter', 'netappFactory', 'toastr',
        function ($rootScope, $scope, $log, $interval, $timeout, smanagerFactory, connectionsFactory, cmanagerFactory, ServerFactory, ApplicationsFactory, modalFactory, $filter, netappFactory, toastr) {

            var _this = this;
            var network_bandwidth_timer;
            var vcenter_vm_timer = [];

            this.activeConnection = null;
            this.showNewConnection = false;
            this.showNewConnectionType = true;
            this.showConfigureConnection = false;
            this.viewSide = true;
            this.seeMoreUpdates = false;
            this.Form = {
                autologin: false,
                save: true
            };
            this.cfgForm = {};
            this.smanagerConnect_form = {};
            this.connections = {
                standalone: [],
                virtual: [],
                storage: []
            };

            /**
             * Server monitoring
             */
            var doPing = function () {
                var host = _this.getActiveConnection().host;

                return ServerFactory.doPing(_this.activeConnection, host, function (data) {
                    $log.debug('Infrastructure Manager [%s] -> Doing doPing successfully -> host [%s]', _this.activeConnection, host);

                    data.data.data.category = 'smanager';
                    smanagerFactory.newData(data.data.data);
                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while doPing -> host [%s] -> ', _this.activeConnection, host, data.error);
                });
            };
            var getKernel = function () {
                _this.loadingKernel = true;

                return ServerFactory.remoteGetKernel(_this.activeConnection, function (data) {
                    $log.debug('Infrastructure Manager [%s] -> Doing getKernel successfully', _this.activeConnection);

                    smanagerFactory.newData(data.data.data);
                    _this.loadingKernel = false;
                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while getKernel -> ', _this.activeConnection, data.error);
                });
            };
            var getRelease = function () {
                _this.loadingRelease = true;

                return ServerFactory.remoteGetRelease(_this.activeConnection, function (data) {
                    $log.debug('Infrastructure Manager [%s] -> Doing getRelease successfully', _this.activeConnection);

                    smanagerFactory.newData(data.data.data);
                    _this.loadingRelease = false;
                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while getRelease -> ', _this.activeConnection, data.error);
                });
            };
            var getCpu = function () {
                _this.loadingCpu = true;

                return ServerFactory.remoteGetCpu(_this.activeConnection, function (data) {
                    $log.debug('Infrastructure Manager [%s] -> Doing getCpu successfully', _this.activeConnection);

                    smanagerFactory.newData(data.data.data);
                    _this.loadingCpu = false;
                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while getCpu -> ', _this.activeConnection, data.error);
                });
            };
            var getMem = function () {
                _this.loadingMem = true;

                return ServerFactory.remoteGetMem(_this.activeConnection, function (data) {
                    $log.debug('Infrastructure Manager [%s] -> Doing getMem successfully', _this.activeConnection);

                    smanagerFactory.newData(data.data.data);
                    _this.loadingMem = false;
                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while getMem -> ', _this.activeConnection, data.error);
                });
            };
            var getDisk = function () {
                _this.loadingDisk = true;

                return ServerFactory.remoteGetDisk(_this.activeConnection, function (data) {
                    $log.debug('Infrastructure Manager [%s] -> Doing getDisk successfully', _this.activeConnection);

                    smanagerFactory.newData(data.data.data);
                    _this.loadingDisk = false;
                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while getDisk -> ', _this.activeConnection, data.error);
                });
            };
            var getUpdates = function () {
                _this.loadingUpdates = true;

                return ServerFactory.remoteGetUpdates(_this.activeConnection, function (data) {
                    $log.debug('Infrastructure Manager [%s] -> Doing getUpdates successfully', _this.activeConnection);

                    smanagerFactory.newData(data.data.data);
                    _this.loadingUpdates = false;
                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while getUpdates -> ', _this.activeConnection, data.error);
                });
            };
            var getProcesses = function () {
                _this.loadingProcess = true;

                return ServerFactory.remoteGetProcesses(_this.activeConnection, function (data) {
                    $log.debug('Infrastructure Manager [%s] -> Doing getProcesses successfully', _this.activeConnection);

                    smanagerFactory.newData(data.data.data);
                    _this.loadingProcess = false;
                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while getProcesses -> ', _this.activeConnection, data.error);
                });
            };
            var getInterfaces = function () {
                return ServerFactory.remoteGetInterfaces(_this.activeConnection, function (data) {
                    $log.debug('Infrastructure Manager [%s] -> Doing remoteGetInterfaces successfully', _this.activeConnection);

                    smanagerFactory.newData(data.data.data);

                    // Delete linux network interval
                    $interval.cancel(network_bandwidth_timer);

                    network_bandwidth_timer = $interval(function () {
                        getInterfaceBandwidth();
                    }, 1000);

                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while getInterfaces -> ', _this.activeConnection, data.error);
                });
            };
            var getInterfaceBandwidth = function () {
                return ServerFactory.remoteGetInterfaceBandwidth(_this.activeConnection, 'ens160', function (data) {
                    // **Do not $log this because its launched every second.

                    smanagerFactory.newData(data.data.data);
                }, function (data) {
                    $log.error('Infrastructure Manager [%s] -> Error while getInterfaceBandwidth -> ', _this.activeConnection, data.error);
                });
            };

            /**
             * @description
             * Start monitoring a connection
             *
             * @param init* {Bool}
             */
            var initConnection = function (init) {
                if (_this.activeConnection == null) return;
                if (_this.getActiveConnection().state !== 'connected') return;

                $log.debug('Infrastructure Manager [%s] -> Initializing connection', _this.activeConnection);

                doPing();

                if (_this.getActiveConnection().so === 'linux') {
                    getKernel();
                    getRelease();
                    getCpu();
                    getMem();
                    getDisk();
                    getUpdates();
                    getProcesses();
                    if (init === false) return;
                    getInterfaces();
                }

                if (_this.getActiveConnection().so === 'snmp') {
                    angular.forEach(_this.getActiveConnection.oids, function (oid) {

                        return ServerFactory.remoteDoSnmp(_this.activeConnection, oid.oid, function (data) {
                            $log.debug('Infrastructure Manager [%s] -> Doing remoteDoSnmp successfully -> oid [%s]', _this.activeConnection, oid.oid);

                            console.log(oid.name + ':' + data.data.data.data);
                        }, function (data) {
                            $log.error('Infrastructure Manager [%s] -> Error while remoteDoSnmp -> oid [%s] -> ', _this.activeConnection, oid.oid, data.error);
                        });

                    });
                }
            };

            /**
             * Bindings
             */
            $scope.$watch(function () {
                return connectionsFactory.connections();
            }, function (newValue) {
                _this.connections = newValue;

                // Auto refresh vCenter VMs each 5 mins
                angular.forEach(_this.connections.virtual, function (connection) {

                    if (vcenter_vm_timer[connection.uuid]) return;

                    $log.debug('Infrastructure Manager [%s] -> Started interval for getVMs every 5 minutes -> vCenter [%s]', connection.uuid, connection.host);

                    vcenter_vm_timer[connection.uuid] = $interval(function () {
                        return smanagerFactory.getVMs(connection.uuid, true);
                    }, 1000 * 60 * 5);
                });
            });

            $scope.$watch(function () {
                return smanagerFactory.activeConnection();
            }, function (newValue) {
                if (newValue && angular.isFunction(newValue.then)) return;
                _this.activeConnection = newValue;
            });

            $scope.$watch(function () {
                return cmanagerFactory.credentials();
            }, function (newValue) {
                _this.credentials = newValue;
            });

            $scope.$on(
                '$destroy',
                function () {

                    // Delete linux network interval
                    $interval.cancel(network_bandwidth_timer);

                    // Delete vCenter interval
                    angular.forEach(connectionsFactory.getConnectionByCategory('virtual'), function (connection) {
                        $interval.cancel(vcenter_vm_timer[connection.uuid]);
                    });
                }
            );

            /**
             * Called from smanagerActionController
             */
            $scope.$on('smanager__new_connection', function () {

                // Delete linux network interval
                $interval.cancel(network_bandwidth_timer);

                _this.newConnectionType();
            });

            $scope.$on('smanager__configure_connection', function () {
                _this.showConfigureConnection = true;
            });

            $scope.$on('smanager__disconnect_connection', function () {

                // Delete linux network interval
                $interval.cancel(network_bandwidth_timer);

                _this.Form = _this.getActiveConnection();
                connectionsFactory.disconnectConnection(_this.activeConnection);
                _this.showNewConnection = true;
            });

            $scope.$on('smanager__delete_connection', function () {

                // Delete linux network interval
                $interval.cancel(network_bandwidth_timer);

                // Delete vCenter interval
                var connection = connectionsFactory.getConnectionByUuid(_this.activeConnection);
                if (connection.category === 'virtual') {
                    $interval.cancel(vcenter_vm_timer[_this.activeConnection]);
                }

                _this.deleteConnection(_this.activeConnection);
            });

            $scope.$on('smanager__run_HIDS', function () {
                ServerFactory.runHIDS(_this.activeConnection);
            });

            $scope.$on('smanager__remote_refresh', function () {
                _this.remoteRefresh();
            });

            $scope.$on('smanager__connection_edit', function () {
                _this.editConnection();
            });

            /**
             * Called from smanagerFactory
             *
             * @param event* {String}
             * @param uuid* {String}
             */
            $scope.$on('smanager__connection_connected', function (event, uuid) {
                if (_this.activeConnection === uuid) initConnection();
                _this.Form = {
                    autologin: false,
                    save: true
                };
            });

            /**
             * ng-click functions
             */

            /**
             * @description
             * Toggles window side
             */
            this.toggleSide = function () {
                _this.viewSide = !_this.viewSide;
            };

            /**
             * @description
             * Opens Credential Manager Application
             */
            this.manageCredentials = function () {
                ApplicationsFactory.openApplication('cmanager').then(function () {
                    // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                    $timeout(function () {
                        ApplicationsFactory.toggleApplication('cmanager');
                    }, 0, false);
                });
            };

            /**
             * @description
             * Returns a connection object
             *
             * @param parent* {Number} If specified returns a parent object
             */
            this.getActiveConnection = function (parent) {
                if (!_this.activeConnection) return null;

                var foundByUuid = connectionsFactory.getConnectionByUuid(_this.activeConnection);
                if (foundByUuid) return foundByUuid;

                if (!foundByUuid) {
                    var foundByUuidMapping = connectionsFactory.getObjectByUuidMapping(_this.activeConnection, parent);
                    if (foundByUuidMapping) return eval(foundByUuidMapping); // jshint ignore:line
                }

                return false;
            };

            /**
             * @description
             * Resets the DOM to show initial template
             */
            this.newConnectionType = function () {

                // Delete linux network interval
                $interval.cancel(network_bandwidth_timer);

                _this.setActiveConnection(null);

                _this.showStandalone = false;
                _this.showSnapshot = false;
                _this.showVm = false;
                _this.showVCenter = false;
                _this.showNewConnection = false;
                _this.showNewConnectionType = true;
            };

            /**
             * Shows connection Form in DOM to add a new connection
             *
             * @param so {String} [vmware, netapp, linux, windows, smtp]
             */
            this.newConnection = function (so) {
                _this.Form = {
                    so: so,
                    autologin: true,
                    save: (so === 'vmware' ? false : true),
                    port: (so === 'vmware' ? 443 : (so === 'netapp' ? 443 : (so === 'linux' ? 22 : 161)))
                };

                _this.showNewConnectionType = false;
                _this.showStandalone = false;
                _this.showSnapshot = false;
                _this.showVm = false;
                _this.showVCenter = false;
                _this.showNewConnection = true;
            };

            /**
             * @description
             * Shows connection Form in DOM to modify an existing connection
             *
             * @param uuid {String} connection uuid
             */
            this.editConnection = function (uuid) {
                $log.debug('Infrastructure Manager [%s] -> Received editConnection', uuid);

                // Delete linux network interval
                $interval.cancel(network_bandwidth_timer);

                if (uuid) smanagerFactory.setActiveConnection(uuid);

                // Wait for next digest circle before continue
                $timeout(function () {
                    _this.Form = _this.getActiveConnection();
                    _this.showStandalone = false;
                    _this.showSnapshot = false;
                    _this.showVm = false;
                    _this.showVCenter = false;
                    _this.showNewConnection = true;
                    _this.showNewConnectionType = false;
                }, 0, false);
            };

            /**
             * @description
             * Starts a new connection using connectionsFactory
             *
             * @param smanagerConnect_form {Object}
             */
            this.sendConnect = function (smanagerConnect_form) {
                _this.smanagerConnect_form.submitted = true;

                if (_this.Form.so === 'linux' || _this.Form.so === 'snmp') _this.Form.category = 'standalone';
                if (_this.Form.so === 'vmware') _this.Form.category = 'virtual';
                if (_this.Form.so === 'netapp') _this.Form.category = 'storage';

                if (smanagerConnect_form.$valid) {
                    _this.smanagerConnect_form.submitted = false;

                    // Delete linux network interval
                    $interval.cancel(network_bandwidth_timer);

                    // Fetch connection
                    var connection = connectionsFactory.connect(_this.Form);
                    smanagerFactory.setActiveConnection(connection.uuid);

                    _this.showNewConnection = false;

                    if (connection.category === 'standalone') _this.showStandalone = true;
                }
            };

            /**
             * @description
             * Refresh a connection by reconnection.
             *
             * @param connection {Object}
             */
            this.refreshConnection = function (connection) {
                $log.debug('Infrastructure Manager [%s] -> Received refreshConnection', connection.uuid);

                connection.refreshing = true;

                connectionsFactory.connect(connection);

                connection.refreshing = false;
            };

            /**
             * @description
             * Deletes an existent connection
             *
             * @param uuid {String}
             */
            this.deleteConnection = function (uuid) {
                $log.debug('Infrastructure Manager [%s] -> Received deleteConnection', uuid);

                smanagerFactory.setActiveConnection(uuid);

                // Wait for next digest circle before continue
                $timeout(function () {
                    var modalInstanceRemoveConnection = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                        {
                            title: function () {
                                return 'Delete connection ' + (_this.getActiveConnection().description ? _this.getActiveConnection().description : _this.getActiveConnection().host);
                            },
                            text: function () {
                                return 'Remove the selected connection from the inventory?';
                            }
                        }
                    );
                    modalInstanceRemoveConnection.result.then(function (res) {

                        if (res !== true) return;
                        $log.debug('Infrastructure Manager [%s] -> Deleting connection', uuid);

                        connectionsFactory.deleteConnection(uuid);
                        _this.newConnectionType();

                    });
                }, 0, false);
            };

            /**
             * @description
             * Sets connection as active/visible in DOM
             *
             * @param connection {Object,null}
             * @param type {String} [standalone, snapshot, vcenter, vm]
             */
            this.setActiveConnection = function (connection, type) {

                // Delete linux network interval
                $interval.cancel(network_bandwidth_timer);

                _this.showNewConnection = false;
                _this.showNewConnectionType = false;
                _this.showStandalone = false;
                _this.showSnapshot = false;
                _this.showVm = false;
                _this.showVCenter = false;

                if (connection === null) smanagerFactory.setActiveConnection(null);

                // Linux/Windows/SNMP
                if (type === 'standalone') {

                    // Is not connected or not initialized
                    if (connection.state !== 'connected') {
                        _this.showNewConnection = true;
                        _this.Form = connection;
                    } else {
                        _this.showStandalone = true;
                        // Not initialized connection
                    }

                    return smanagerFactory.setActiveConnection(connection.uuid);
                }

                if (type === 'snapshot') {
                    _this.showSnapshot = true;

                    return smanagerFactory.setActiveConnection(connection['snapshot-version-uuid']);
                }

                if (type === 'vm') {
                    _this.showVm = true;

                    return smanagerFactory.setActiveConnection(connection.config.uuid);
                }

                if (type === 'vcenter') {
                    _this.showVCenter = true;

                    return smanagerFactory.setActiveConnection(connection.uuid);
                }

            };

            // TODO:
            this.getConnectionFolders = function (category) {
                var flags = [];
                var output = [];

                angular.forEach(_this.connections[category], function (connection) {
                    if (flags[connection.folder]) return;

                    flags[connection.folder] = true;
                    output.push(connection.folder);
                });

                return output;
            };

            /**
             * NETAPP MONITOR
             */
            this.getSnapshotFiles = function (uuid, host, vserver, volume, snapshot, path, xml) {
                return smanagerFactory.getSnapshotFiles(uuid, host, vserver, volume, snapshot, path, xml).then(function () {
                    $log.debug('Infrastructure Manager [%s] -> Doing getSnapshotFiles successfully -> snapshot [%s]', uuid, snapshot);
                }).catch(function (e) {
                    $log.error('Infrastructure Manager [%s] -> Error while getSnapshotFiles -> snapshot [%s] vm [%s] -> ', uuid, snapshot, e);

                    toastr.error(e, 'Get Storage Snapshot Files');
                });
            };

            this.getLinkByVMwareDatastore = function (virtual_uuid, datastore_name) {
                var link = smanagerFactory.getLinkByVMwareDatastore(virtual_uuid, datastore_name);

                if (link) return connectionsFactory.getConnectionByUuid(link.storage);
                return false;
            };

            /**
             * LINUX MONITOR
             */

            /**
             * @description
             * Shows or hides Updates table
             */
            this.toggleUpdates = function () {
                _this.seeMoreUpdates = !_this.seeMoreUpdates;
            };

            this.getCurrentCpu = function () {
                if (angular.isUndefined(_this.getActiveConnection().cpu)) return 0;

                return _this.getActiveConnection().cpu.filter(function (obj) {
                    return obj.option === 'Model name';
                })[0].data;
            };

            this.getCpuCores = function () {
                if (angular.isUndefined(_this.getActiveConnection().cpu)) return 0;

                return _this.getActiveConnection().cpu.filter(function (obj) {
                    return obj.option === 'CPU(s)';
                })[0].data;
            };

            this.getCpuLoad = function () {
                if (angular.isUndefined(_this.connections)) return 0.0;
                if (angular.isUndefined(_this.getActiveConnection())) return 0.0;
                if (angular.isUndefined(_this.getActiveConnection().cpu)) return 0.0;

                return _this.getActiveConnection().cpu.filter(function (obj) {
                    return obj.option === 'Load average';
                })[0].data.split(' ')[0];
            };

            // 1 extract first part
            // 2 extract second part
            this.extractSpace = function (string, type) {
                if (type === 1) {
                    return string.slice(0, -1);
                } else if (type === 2) {
                    return string.substr(string.length - 1) + 'iB';
                }
            };

            this.getCpuStatus = function () {
                if (angular.isUndefined(_this.connections)) return 'bg-primary-i';
                if (angular.isUndefined(_this.getActiveConnection().cpu)) return 'bg-primary-i';

                var cpuLoad = _this.getCpuLoad().slice(0, -1);
                if (cpuLoad < 20) return 'bg-primary-i';
                if (cpuLoad < 80) return 'bg-success-i';
                if (cpuLoad < 90) return 'bg-warning-i';
                return 'bg-danger-i';
            };

            this.getMemStatus = function () {
                if (angular.isUndefined(_this.connections)) return 'bg-primary-i';
                if (angular.isUndefined(_this.getActiveConnection().mem)) return 'bg-primary-i';

                var memUsed = 100 - (_this.getActiveConnection().mem[0].free / _this.getActiveConnection().mem[0].total * 100).toFixed(1);
                if (memUsed < 20) return 'bg-primary-i';
                if (memUsed < 80) return 'bg-success-i';
                if (memUsed < 90) return 'bg-warning-i';
                return 'bg-danger-i';
            };

            this.getDiskStatus = function (percent) {
                if (angular.isUndefined(_this.getActiveConnection().disk)) return [1, 'text-primary'];

                var diskPercent = _this.extractSpace(percent, 1);
                if (diskPercent < 20) return [1, 'text-primary'];
                if (diskPercent < 80) return [2, 'text-success'];
                if (diskPercent < 90) return [3, 'text-warning'];
                return [4, 'text-danger'];
            };

            this.getUpdatesStatus = function () {
                if (angular.isUndefined(_this.connections)) return 'bg-primary-i';
                if (angular.isUndefined(_this.getActiveConnection().updates)) return 'bg-primary-i';

                var totalUpdates = _this.getActiveConnection().updates.length;
                if (totalUpdates < 1) return 'bg-primary-i';
                if (totalUpdates < 2) return 'bg-success-i';
                if (totalUpdates < 5) return 'bg-warning-i;';
                return 'bg-danger-i';
            };

            this.getMaxDiskStatus = function () {
                if (angular.isUndefined(_this.connections)) return ['bg-primary-i', 0];
                if (angular.isUndefined(_this.getActiveConnection().disk)) return ['bg-primary-i', 0];

                var status = 1;
                var percent = 0;

                angular.forEach(_this.getActiveConnection().disk, function (disk) {
                    var current_percent = parseInt(_this.extractSpace(disk.used_percent, 1));
                    var current_disk_status = parseInt(_this.getDiskStatus(disk.used_percent)[0]);

                    if (current_disk_status > status) {
                        status = current_disk_status;
                    }
                    if (current_percent > percent) percent = current_percent;
                });

                if (status === 1) return ['bg-primary-i', percent];
                if (status === 2) return ['bg-success-i', percent];
                if (status === 3) return ['bg-warning-i', percent];
                return ['bg-danger-i', percent];
            };

            this.isSystemProcess = function (process) {
                return process.args.charAt(0) === '[';
            };

            /**
             * @description
             * Refresh connection monitor data
             *
             * @param type* {String}
             */
            this.remoteRefresh = function (type) {
                if (type === 'kernel') return getKernel();
                else if (type === 'release') return getRelease();
                else if (type === 'cpu') return getCpu();
                else if (type === 'mem') return getMem();
                else if (type === 'disk') return getDisk();
                else if (type === 'updates') return getUpdates();
                else if (type === 'processes') return getProcesses();
                else return initConnection(false);
            };

            /**
             * CONTEXT MENUS
             */
            this.storageContextMenu = [
                {
                    text: '<i class="fa fa-pencil"></i> Edit Connection',
                    click: function ($itemScope) {
                        _this.editConnection($itemScope.$parent.$parent.storage.uuid);
                    }
                },
                {
                    text: '<i class="fa fa-refresh"></i> Rescan Storage',
                    click: function ($itemScope) {
                        //TODO: delete current links
                        //TODO: delete current maps
                        _this.refreshConnection($itemScope.$parent.$parent.storage);
                    }
                },
                {
                    text: '<i class="fa fa-trash text-danger"></i> Delete Connection',
                    click: function ($itemScope) {
                        //TODO: delete current links
                        //TODO: delete current maps
                        _this.deleteConnection($itemScope.$parent.$parent.storage.uuid);
                    }
                }
            ];

            this.volumeContextMenu = [
                {
                    text: '<i class="fa fa-database"></i> Create Storage Snapshot',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Ask for create storage snapshot -> volume [%s]', $itemScope.$parent.$parent.volume['volume-id-attributes'].uuid, $itemScope.$parent.$parent.volume['volume-id-attributes'].name);

                        smanagerFactory.setActiveConnection($itemScope.$parent.$parent.volume['volume-id-attributes'].uuid);

                        // Wait for next digest circle before continue
                        $timeout(function () {
                            var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                {
                                    title: function () {
                                        return 'Create storage snapshot';
                                    },
                                    text: function () {
                                        return 'Do you want to create a Storage snapshot for ' + $itemScope.$parent.$parent.volume['volume-id-attributes'].name + ' volume?';
                                    }
                                }
                            );
                            modalInstance.result.then(function (res) {

                                if (res !== true) return;
                                $log.debug('Infrastructure Manager [%s] -> Creating storage snapshot -> volume [%s]', $itemScope.$parent.$parent.volume['volume-id-attributes'].uuid, $itemScope.$parent.$parent.volume['volume-id-attributes'].name);

                                modalFactory.openLittleModal('PLEASE WAIT', 'Creating volume snapshot', '.window--smanager .window__main', 'plain');

                                return netappFactory.createSnapshot(
                                    _this.getActiveConnection(2).credential,
                                    _this.getActiveConnection(2).host,
                                    _this.getActiveConnection(2).port,
                                    $itemScope.$parent.$parent.volume['volume-id-attributes']['owning-vserver-name'],
                                    $itemScope.$parent.$parent.volume['volume-id-attributes'].name
                                ).then(function (res) {
                                    if (res.status === 'error') {
                                        $log.error('Infrastructure Manager [%s] -> Error creating storage snapshot -> volume [%s] -> ', $itemScope.$parent.$parent.volume['volume-id-attributes'].uuid, $itemScope.$parent.$parent.volume['volume-id-attributes'].name, res.error);

                                        toastr.error(res.error, 'Create Volume Snapshot');
                                        throw new Error('Failed to create Volume Snapshot');
                                    }

                                    $log.debug('Infrastructure Manager [%s] -> Storage snapshot created successfully -> volume [%s]', $itemScope.$parent.$parent.volume['volume-id-attributes'].uuid, $itemScope.$parent.$parent.volume['volume-id-attributes'].name);

                                    modalFactory.closeModal('.window--smanager .window__main');
                                    toastr.success('Snapshot created successfully for volume ' + $itemScope.$parent.$parent.volume['volume-id-attributes'].name, 'Create Volume Snapshot');
                                });
                            });
                        }, 0, false);
                    }
                },
                null,
                {
                    text: '<i class="fa fa-file"></i> Rescan Volume',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Received Rescan Volume -> volume [%s]', $itemScope.$parent.$parent.volume['volume-id-attributes'].uuid, $itemScope.$parent.$parent.volume['volume-id-attributes'].name);

                        //TODO: delete current links
                        //TODO: delete current maps

                        smanagerFactory.setActiveConnection($itemScope.$parent.$parent.volume['volume-id-attributes'].uuid);

                        // Wait for next digest circle before continue
                        $timeout(function () {
                            $itemScope.$parent.$parent.volume.refreshing = true;

                            return smanagerFactory.getVolumeData({
                                uuid: _this.getActiveConnection(2).uuid,
                                credential: _this.getActiveConnection(2).credential,
                                host: _this.getActiveConnection(2).host,
                                port: _this.getActiveConnection(2).port,
                                vserver_name: $itemScope.$parent.$parent.volume['volume-id-attributes']['owning-vserver-name'],
                                volume_name: $itemScope.$parent.$parent.volume['volume-id-attributes'].name,
                                volume_uuid: $itemScope.$parent.$parent.volume['volume-id-attributes'].uuid
                            }).then(function () {
                                $log.debug('Infrastructure Manager [%s] -> Storage volume rescanned successfully -> volume [%s]', $itemScope.$parent.$parent.volume['volume-id-attributes'].uuid, $itemScope.$parent.$parent.volume['volume-id-attributes'].name);

                                toastr.success('Rescan of volume ' + $itemScope.$parent.$parent.volume['volume-id-attributes'].name + ' was succesfully', 'Rescan volume');
                                $itemScope.$parent.$parent.volume.refreshing = false;
                            }).catch(function (e) {
                                $log.error('Infrastructure Manager [%s] -> Error while rescanning a volume -> volume [%s] -> ', $itemScope.$parent.$parent.volume['volume-id-attributes'].uuid, $itemScope.$parent.$parent.volume['volume-id-attributes'].name, e);

                                toastr.error(e, 'Rescan volume');
                                $itemScope.$parent.$parent.volume.refreshing = false;
                            });
                        }, 0, false);

                    }
                }

            ];

            this.snapshotContextMenu = [
                {
                    text: '<i class="fa fa-database"></i> Mount as Datastore',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Ask for mount storage snapshot into a datastore -> snapshot [%s]', $itemScope.snapshot['snapshot-instance-uuid'], $itemScope.snapshot.name);

                        smanagerFactory.setActiveConnection($itemScope.snapshot['snapshot-instance-uuid']);

                        // Wait for next digest circle before continue
                        $timeout(function () {
                            var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                {
                                    title: function () {
                                        return 'Mount Snapshot as Datastore';
                                    },
                                    text: function () {
                                        return 'Do you want to mount the Storage Snapshot to an ESXi host?';
                                    }
                                }
                            );
                            modalInstance.result.then(function (res) {

                                if (res !== true) return;
                                ApplicationsFactory.openApplication('backupsm').then(function () {

                                    // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                                    $timeout(function () {
                                        ApplicationsFactory.toggleApplication('backupsm');

                                        $log.debug('Infrastructure Manager [%s] -> Launching Backups Manager for mounting storage snapshot into a datastore -> snapshot [%s]', $itemScope.snapshot['snapshot-instance-uuid'], $itemScope.snapshot.name);

                                        var snapshots = _this.getActiveConnection(1).snapshots;
                                        if (!Array.isArray(snapshots)) snapshots = [snapshots];

                                        $rootScope.$broadcast('backupsm__mount_restore_datastore', {
                                            storage: _this.getActiveConnection(3),
                                            vserver: _this.getActiveConnection(2),
                                            volume: _this.getActiveConnection(1),
                                            snapshots: snapshots,
                                            snapshot: $itemScope.snapshot['snapshot-instance-uuid'],
                                            ESXihosts: smanagerFactory.getESXihosts()
                                        });
                                    }, 0, false);
                                });
                            });
                        }, 0, false);
                    }
                },
                {
                    text: '<i class="fa fa-file"></i> Restore Datastore files',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Ask for mount storage snapshot into a datastore to restore files -> snapshot [%s]', $itemScope.snapshot['snapshot-instance-uuid'], $itemScope.snapshot.name);

                        smanagerFactory.setActiveConnection($itemScope.snapshot['snapshot-instance-uuid']);

                        // Wait for next digest circle before continue
                        $timeout(function () {
                            var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                {
                                    title: function () {
                                        return 'Restore Datastore Files';
                                    },
                                    text: function () {
                                        return 'Do you want to mount the Storage Snapshot to an ESXi host and restore datastore files?';
                                    }
                                }
                            );
                            modalInstance.result.then(function (res) {

                                if (res !== true) return;
                                ApplicationsFactory.openApplication('backupsm').then(function () {

                                    // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                                    $timeout(function () {
                                        ApplicationsFactory.toggleApplication('backupsm');

                                        $log.debug('Infrastructure Manager [%s] -> Launching Backups Manager for restoring a volume files -> snapshot [%s]', $itemScope.snapshot['snapshot-instance-uuid'], $itemScope.snapshot.name);

                                        var snapshots = _this.getActiveConnection(1).snapshots;
                                        if (!Array.isArray(snapshots)) snapshots = [snapshots];

                                        $rootScope.$broadcast('backupsm__restore_datastore_files', {
                                            storage: _this.getActiveConnection(3),
                                            vserver: _this.getActiveConnection(2),
                                            volume: _this.getActiveConnection(1),
                                            snapshots: snapshots,
                                            snapshot: $itemScope.snapshot['snapshot-instance-uuid'],
                                            ESXihosts: smanagerFactory.getESXihosts()
                                        });
                                    }, 0, false);
                                });
                            });
                        }, 0, false);

                    }
                },
                {
                    text: '<i class="fa fa-trash"></i> Delete Storage SnapShot',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Ask for delete storage snapshot -> snapshot [%s]', $itemScope.snapshot['snapshot-instance-uuid'], $itemScope.snapshot.name);

                        smanagerFactory.setActiveConnection($itemScope.snapshot['snapshot-instance-uuid']);

                        // Wait for next digest circle before continue
                        $timeout(function () {
                            var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                {
                                    title: function () {
                                        return 'Delete storage snapshot';
                                    },
                                    text: function () {
                                        return 'Do you want to delete the storage snapshot ' + $itemScope.snapshot.name + '?';
                                    }
                                }
                            );
                            modalInstance.result.then(function (res) {

                                if (res !== true) return;
                                $log.debug('Infrastructure Manager [%s] -> Deleting storage snapshot -> snapshot [%s]', $itemScope.snapshot['snapshot-instance-uuid'], $itemScope.snapshot.name);

                                modalFactory.openLittleModal('PLEASE WAIT', 'Deleting volume snapshot', '.window--smanager .window__main', 'plain');

                                return netappFactory.deleteSnapshot(
                                    _this.getActiveConnection(3).credential,
                                    _this.getActiveConnection(3).host,
                                    _this.getActiveConnection(3).port,
                                    _this.getActiveConnection(2)['vserver-name'],
                                    _this.getActiveConnection(1)['volume-id-attributes'].name,
                                    $itemScope.snapshot.name,
                                    $itemScope.snapshot['snapshot-instance-uuid']
                                ).then(function (res) {
                                    if (res.status === 'error') {
                                        $log.error('Infrastructure Manager [%s] -> Error deleting storage snapshot -> snapshot [%s], volume [%s] -> ', $itemScope.snapshot['snapshot-instance-uuid'], $itemScope.snapshot.name, _this.getActiveConnection(1)['volume-id-attributes'].name, res.error);

                                        toastr.error(res.error, 'Delete Storage Snapshot');
                                        throw new Error('Failed to delete Storage Snapshot');
                                    }

                                    $log.debug('Infrastructure Manager [%s] -> Storage snapshot deleted successfully -> snapshot [%s], volume [%s]', $itemScope.snapshot['snapshot-instance-uuid'], $itemScope.snapshot.name, _this.getActiveConnection(1)['volume-id-attributes'].name);

                                    modalFactory.closeModal('.window--smanager .window__main');
                                    toastr.success('Snapshot ' + $itemScope.snapshot.name + ' deleted successfully for volume ' + _this.getActiveConnection(1)['volume-id-attributes'].name, 'Delete Volume Snapshot');
                                });
                            });
                        }, 0, false);
                    }
                }

            ];

            this.snapshotVMContextMenu = [
                {
                    text: '<i class="fa fa-server"></i> Instant VM',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Ask for Instant VM recovery -> vm [%s]', $itemScope.vm.vm.vm, $itemScope.vm.name);

                        var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                            {
                                title: function () {
                                    return 'Instant VM recovery';
                                },
                                text: function () {
                                    return 'Do you want to perform an Instant VM recovery of ' + $itemScope.vm.name + '?';
                                }
                            }
                        );
                        modalInstance.result.then(function (res) {

                            if (res !== true) return;
                            ApplicationsFactory.openApplication('backupsm').then(function () {

                                // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                                $timeout(function () {
                                    ApplicationsFactory.toggleApplication('backupsm');

                                    $log.debug('Infrastructure Manager [%s] -> Launching Backups Manager for Instant VM recovery -> vm [%s]', $itemScope.vm.vm.vm, $itemScope.vm.name);

                                    $rootScope.$broadcast('backupsm__vm_instant_recovery', {
                                        storage: _this.getActiveConnection(3),
                                        vserver: _this.getActiveConnection(2),
                                        volume: _this.getActiveConnection(1),
                                        snapshots: [_this.getActiveConnection()],
                                        snapshot: _this.getActiveConnection()['snapshot-instance-uuid'],
                                        ESXihosts: smanagerFactory.getESXihosts(),
                                        vm: $itemScope.vm.vm
                                    });
                                }, 0, false);
                            });
                        });
                    }
                },
                ['<i class="fa fa-server"></i> Restore entire VM', function ($itemScope) {
                    $log.debug('Infrastructure Manager [%s] -> Ask for restore entire VM -> vm [%s]', $itemScope.vm.vm.vm, $itemScope.vm.name);

                    if ($itemScope.vm.vm === null) {
                        return modalFactory.openLittleModal('Error while restoring Backup', 'Not found any linked VirtualMachine for ' + $itemScope.vm.name + ', maybe original VM was deleted from vCenter. Try doing an Instant VM restore', '.window--smanager .window__main', 'plain');
                    }

                    var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                        {
                            title: function () {
                                return 'Restore entire VM';
                            },
                            text: function () {
                                return 'Do you want to perform a entire VM restore of ' + $itemScope.vm.name + '?';
                            }
                        }
                    );
                    modalInstance.result.then(function (res) {

                        if (res !== true) return;
                        ApplicationsFactory.openApplication('backupsm').then(function () {

                            // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                            $timeout(function () {
                                ApplicationsFactory.toggleApplication('backupsm');

                                $log.debug('Infrastructure Manager [%s] -> Launching Backups Manager for restore entire VM -> vm [%s]', $itemScope.vm.vm.vm, $itemScope.vm.name);

                                $rootScope.$broadcast('backupsm__restore_vm', {
                                    storage: _this.getActiveConnection(3),
                                    vserver: _this.getActiveConnection(2),
                                    volume: _this.getActiveConnection(1),
                                    snapshots: [_this.getActiveConnection()],
                                    snapshot: _this.getActiveConnection()['snapshot-instance-uuid'],
                                    ESXihosts: smanagerFactory.getESXihosts(),
                                    vm: $itemScope.vm.vm,
                                    current_location: {
                                        uuid: $itemScope.vm.virtual,
                                        credential: connectionsFactory.getConnectionByUuid($itemScope.vm.virtual).credential,
                                        host: connectionsFactory.getConnectionByUuid($itemScope.vm.virtual).host,
                                        port: connectionsFactory.getConnectionByUuid($itemScope.vm.virtual).port
                                    }
                                });
                            }, 0, false);
                        });
                    });
                }],
                {
                    text: '<i class="fa fa-files"></i> Restore Guest files',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Ask for recovery VM Guest Files -> vm [%s]', $itemScope.vm.vm.vm, $itemScope.vm.name);

                        var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                            {
                                title: function () {
                                    return 'Instant VM recovery';
                                },
                                text: function () {
                                    return 'Do you want to perform a VM Guest Files recovery of ' + $itemScope.vm.name + '?';
                                }
                            }
                        );
                        modalInstance.result.then(function (res) {

                            if (res !== true) return;
                            ApplicationsFactory.openApplication('backupsm').then(function () {

                                // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                                $timeout(function () {
                                    ApplicationsFactory.toggleApplication('backupsm');

                                    $log.debug('Infrastructure Manager [%s] -> Launching Backups Manager for recovery VM Guest Files -> vm [%s]', $itemScope.vm.vm.vm, $itemScope.vm.name);

                                    $rootScope.$broadcast('backupsm__restore_vm_guest_files', {
                                        storage: _this.getActiveConnection(3),
                                        vserver: _this.getActiveConnection(2),
                                        volume: _this.getActiveConnection(1),
                                        snapshots: [_this.getActiveConnection()],
                                        snapshot: _this.getActiveConnection()['snapshot-instance-uuid'],
                                        ESXihosts: smanagerFactory.getESXihosts(),
                                        vm: $itemScope.vm.vm
                                    });
                                }, 0, false);
                            });
                        });
                    }
                }
            ];

            this.virtualContextMenu = [
                {
                    text: '<i class="fa fa-pencil"></i> Edit Connection',
                    click: function ($itemScope) {
                        _this.editConnection($itemScope.$parent.$parent.virtual.uuid);
                    }
                },
                {
                    text: '<i class="fa fa-refresh"></i> Rescan vCenter',
                    click: function ($itemScope) {
                        //TODO: delete current links
                        //TODO: delete current maps
                        _this.refreshConnection($itemScope.$parent.$parent.virtual);
                    }
                },
                {
                    text: '<i class="fa fa-trash text-danger"></i> Delete Connection',
                    click: function ($itemScope) {
                        _this.deleteConnection($itemScope.$parent.$parent.virtual.uuid);
                    }
                }
            ];

            this.VMContextMenu = [
                ['<i class="fa fa-power-off"></i> Power', function ($itemScope) {
                },
                    [
                        ['<i class="fa fa-play text-success"></i> Power On', function ($itemScope) {
                            $log.debug('Infrastructure Manager [%s] -> Ask for Power ON VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                            smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                            // Wait for next digest circle before continue
                            $timeout(function () {
                                var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                    {
                                        title: function () {
                                            return 'Power ON VM';
                                        },
                                        text: function () {
                                            return 'Do you want to Power ON ' + $itemScope.vm.name + '?';
                                        }
                                    }
                                );
                                modalInstance.result.then(function (res) {

                                    if (res !== true) return;
                                    $log.debug('Infrastructure Manager [%s] -> Powering ON VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                    var credential = _this.getActiveConnection(1).credential;
                                    var host = _this.getActiveConnection(1).host;
                                    var port = _this.getActiveConnection(1).port;
                                    return smanagerFactory.powerOnVM(credential, host, port, $itemScope.vm.vm).then(function () {
                                        $log.debug('Infrastructure Manager [%s] -> Doing powerOnVM successfully -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                        return smanagerFactory.refreshVM(eval(connectionsFactory.getObjectByUuidMapping($itemScope.vm.config.uuid)), _this.getActiveConnection(1));// jshint ignore:line
                                    }).catch(function (e) {
                                        $log.error('Infrastructure Manager [%s] -> Error while powerOnVM -> vm [%s] -> ', $itemScope.vm.vm, $itemScope.vm.name, e);

                                        toastr.error(e, 'Power ON VM');
                                    });
                                });
                            }, 0, false);
                        }],
                        ['<i class="fa fa-stop text-danger"></i> Power Off', function ($itemScope) {
                            $log.debug('Infrastructure Manager [%s] -> Ask for Power OFF VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                            smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                            // Wait for next digest circle before continue
                            $timeout(function () {
                                var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                    {
                                        title: function () {
                                            return 'Power OFF VM';
                                        },
                                        text: function () {
                                            return 'Do you want to Power OFF ' + $itemScope.vm.name + '?';
                                        }
                                    }
                                );
                                modalInstance.result.then(function (res) {

                                    if (res !== true) return;
                                    $log.debug('Infrastructure Manager [%s] -> Powering OFF VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                    var credential = _this.getActiveConnection(1).credential;
                                    var host = _this.getActiveConnection(1).host;
                                    var port = _this.getActiveConnection(1).port;
                                    return smanagerFactory.powerOffVM(credential, host, port, $itemScope.vm.vm).then(function () {
                                        $log.debug('Infrastructure Manager [%s] -> Doing powerOffVM successfully -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                        return smanagerFactory.refreshVM(eval(connectionsFactory.getObjectByUuidMapping($itemScope.vm.config.uuid)), _this.getActiveConnection(1));// jshint ignore:line
                                    }).catch(function (e) {
                                        $log.error('Infrastructure Manager [%s] -> Error while powerOffVM -> vm [%s] -> ', $itemScope.vm.vm, $itemScope.vm.name, e);

                                        toastr.error(e, 'Power OFF VM');
                                    });
                                });
                            }, 0, false);
                        }],
                        ['<i class="fa fa-pause text-warning"></i> Suspend', function ($itemScope) {
                            $log.debug('Infrastructure Manager [%s] -> Ask for Suspend VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                            smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                            // Wait for next digest circle before continue
                            $timeout(function () {
                                var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                    {
                                        title: function () {
                                            return 'Suspend VM';
                                        },
                                        text: function () {
                                            return 'Do you want to Suspend ' + $itemScope.vm.name + '?';
                                        }
                                    }
                                );
                                modalInstance.result.then(function (res) {

                                    if (res !== true) return;
                                    $log.debug('Infrastructure Manager [%s] -> Suspending VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                    var credential = _this.getActiveConnection(1).credential;
                                    var host = _this.getActiveConnection(1).host;
                                    var port = _this.getActiveConnection(1).port;
                                    return smanagerFactory.suspendVM(credential, host, port, $itemScope.vm.vm).then(function () {
                                        $log.debug('Infrastructure Manager [%s] -> Doing suspendVM successfully -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                        return smanagerFactory.refreshVM(eval(connectionsFactory.getObjectByUuidMapping($itemScope.vm.config.uuid)), _this.getActiveConnection(1));// jshint ignore:line
                                    }).catch(function (e) {
                                        $log.error('Infrastructure Manager [%s] -> Error while suspendVM -> vm [%s] -> ', $itemScope.vm.vm, $itemScope.vm.name, e);

                                        toastr.error(e, 'Suspend VM');
                                    });
                                });
                            }, 0, false);
                        }],
                        ['<i class="fa fa-refresh"></i> Reset', function ($itemScope) {
                            $log.debug('Infrastructure Manager [%s] -> Ask for Reset VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                            smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                            // Wait for next digest circle before continue
                            $timeout(function () {
                                var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                    {
                                        title: function () {
                                            return 'Reset VM';
                                        },
                                        text: function () {
                                            return 'Do you want to Reset ' + $itemScope.vm.name + '?';
                                        }
                                    }
                                );
                                modalInstance.result.then(function (res) {

                                    if (res !== true) return;
                                    $log.debug('Infrastructure Manager [%s] -> Resetting VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                    var credential = _this.getActiveConnection(1).credential;
                                    var host = _this.getActiveConnection(1).host;
                                    var port = _this.getActiveConnection(1).port;
                                    return smanagerFactory.resetVM(credential, host, port, $itemScope.vm.vm).then(function () {
                                        $log.debug('Infrastructure Manager [%s] -> Doing resetVM successfully -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                        return smanagerFactory.refreshVM(eval(connectionsFactory.getObjectByUuidMapping($itemScope.vm.config.uuid)), _this.getActiveConnection(1));// jshint ignore:line
                                    }).catch(function (e) {
                                        $log.error('Infrastructure Manager [%s] -> Error while resetVM -> vm [%s] -> ', $itemScope.vm.vm, $itemScope.vm.name, e);

                                        toastr.error(e, 'Reset VM');
                                    });
                                });
                            }, 0, false);
                        }],
                        null,
                        ['<i class="fa fa-stop text-danger"></i> Shut Down Guest OS', function ($itemScope) {
                            $log.debug('Infrastructure Manager [%s] -> Ask for Shut Down Guest OS -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                            smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                            // Wait for next digest circle before continue
                            $timeout(function () {
                                var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                    {
                                        title: function () {
                                            return 'Shut Down Guest OS';
                                        },
                                        text: function () {
                                            return 'Do you want to Shut Down Guest OS ' + $itemScope.vm.name + '?';
                                        }
                                    }
                                );
                                modalInstance.result.then(function (res) {

                                    if (res !== true) return;
                                    $log.debug('Infrastructure Manager [%s] -> Shutting Down Guest OS -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                    var credential = _this.getActiveConnection(1).credential;
                                    var host = _this.getActiveConnection(1).host;
                                    var port = _this.getActiveConnection(1).port;
                                    return smanagerFactory.shutdownGuest(credential, host, port, $itemScope.vm.vm).then(function () {
                                        $log.debug('Infrastructure Manager [%s] -> Doing shutdownGuest successfully -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                        return smanagerFactory.refreshVM(eval(connectionsFactory.getObjectByUuidMapping($itemScope.vm.config.uuid)), _this.getActiveConnection(1));// jshint ignore:line
                                    }).catch(function (e) {
                                        $log.error('Infrastructure Manager [%s] -> Error while shutdownGuest -> vm [%s] -> ', $itemScope.vm.vm, $itemScope.vm.name, e);

                                        toastr.error(e, 'Shut Down Guest OS');
                                    });
                                });
                            }, 0, false);
                        }],
                        ['<i class="fa fa-refresh"></i> Restart Guest OS', function ($itemScope) {
                            $log.debug('Infrastructure Manager [%s] -> Ask for Restart Guest OS -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                            smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                            // Wait for next digest circle before continue
                            $timeout(function () {
                                var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                    {
                                        title: function () {
                                            return 'Restart Guest OS';
                                        },
                                        text: function () {
                                            return 'Do you want to Restart Guest OS ' + $itemScope.vm.name + '?';
                                        }
                                    }
                                );
                                modalInstance.result.then(function (res) {

                                    if (res !== true) return;
                                    $log.debug('Infrastructure Manager [%s] -> Restarting Guest OS -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                    var credential = _this.getActiveConnection(1).credential;
                                    var host = _this.getActiveConnection(1).host;
                                    var port = _this.getActiveConnection(1).port;
                                    return smanagerFactory.rebootGuest(credential, host, port, $itemScope.vm.vm).then(function () {
                                        $log.debug('Infrastructure Manager [%s] -> Doing rebootGuest successfully -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                        return smanagerFactory.refreshVM(eval(connectionsFactory.getObjectByUuidMapping($itemScope.vm.config.uuid)), _this.getActiveConnection(1));// jshint ignore:line
                                    }).catch(function (e) {
                                        $log.error('Infrastructure Manager [%s] -> Error while rebootGuest -> vm [%s] -> ', $itemScope.vm.vm, $itemScope.vm.name, e);

                                        toastr.error(e, 'Restart Guest OS');
                                    });
                                });
                            }, 0, false);
                        }]
                    ]
                ],
                {
                    text: '<i class="fa fa-television"></i> Open Remote Console',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Opening Remote Console APP -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                        smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                        ApplicationsFactory.openApplication('wmks').then(function () {

                            // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                            $timeout(function () {
                                ApplicationsFactory.toggleApplication('wmks');

                                $rootScope.$broadcast('wmks__new_data', {
                                    vm: $itemScope.vm.vm,
                                    host: _this.getActiveConnection(1).host,
                                    port: _this.getActiveConnection(1).port,
                                    credential: _this.getActiveConnection(1).credential
                                });
                            }, 0, false);
                        });
                    }
                },
                null,
                ['<i class="fa fa-server"></i> Restore', function ($itemScope) {
                    // Code
                },
                    [
                        ['<i class="fa fa-server"></i> Instant VM', function ($itemScope) {
                            $log.debug('Infrastructure Manager [%s] -> Ask for Instant VM recovery -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                            smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                            // Wait for next digest circle before continue
                            $timeout(function () {
                                var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                    {
                                        title: function () {
                                            return 'Instant VM recovery';
                                        },
                                        text: function () {
                                            return 'Do you want to perform an Instant VM recovery of ' + $itemScope.vm.name + '?';
                                        }
                                    }
                                );
                                modalInstance.result.then(function (res) {

                                    if (res !== true) return;
                                    ApplicationsFactory.openApplication('backupsm').then(function () {

                                        // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                                        $timeout(function () {
                                            ApplicationsFactory.toggleApplication('backupsm');

                                            $log.debug('Infrastructure Manager [%s] -> Launching Backups Manager for Instant VM recovery -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                            $rootScope.$broadcast('backupsm__vm_instant_recovery', {
                                                storage: connectionsFactory.getConnectionByUuid(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).storage),
                                                /* jshint ignore:start */
                                                vserver: eval(connectionsFactory.getObjectByUuidMapping(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).vserver)),
                                                volume: eval(connectionsFactory.getObjectByUuidMapping(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).volume)),
                                                snapshots: eval(connectionsFactory.getObjectByUuidMapping(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).volume)).snapshots, //TODO: if only 1 snapshot this will be an object --> conver to array. TODO: some snapshots could not contain this VM
                                                /* jshint ignore:end */
                                                snapshot: '',
                                                ESXihosts: smanagerFactory.getESXihosts(),
                                                vm: $itemScope.vm
                                            });
                                        }, 0, false);
                                    });
                                });
                            }, 0, false);
                        }],
                        ['<i class="fa fa-server"></i> Restore entire VM', function ($itemScope) {
                            $log.debug('Infrastructure Manager [%s] -> Ask for restore entire VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                            smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                            // Wait for next digest circle before continue
                            $timeout(function () {
                                var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                    {
                                        title: function () {
                                            return 'Restore entire VM';
                                        },
                                        text: function () {
                                            return 'Do you want to perform a entire VM restore of ' + $itemScope.vm.name + '?';
                                        }
                                    }
                                );
                                modalInstance.result.then(function (res) {

                                    if (res !== true) return;
                                    ApplicationsFactory.openApplication('backupsm').then(function () {

                                        // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                                        $timeout(function () {
                                            ApplicationsFactory.toggleApplication('backupsm');

                                            $log.debug('Infrastructure Manager [%s] -> Launching Backups Manager for restore entire VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                            $rootScope.$broadcast('backupsm__restore_vm', {
                                                storage: connectionsFactory.getConnectionByUuid(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).storage),
                                                /* jshint ignore:start */
                                                vserver: eval(connectionsFactory.getObjectByUuidMapping(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).vserver)),
                                                volume: eval(connectionsFactory.getObjectByUuidMapping(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).volume)),
                                                snapshots: eval(connectionsFactory.getObjectByUuidMapping(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).volume)).snapshots, //TODO: if only 1 snapshot this will be an object --> conver to array. TODO: some snapshots could not contain this VM
                                                /* jshint ignore:end */
                                                snapshot: '',
                                                ESXihosts: smanagerFactory.getESXihosts(),
                                                vm: $itemScope.vm,
                                                current_location: {
                                                    uuid: _this.getActiveConnection(1).uuid,
                                                    credential: _this.getActiveConnection(1).credential,
                                                    host: _this.getActiveConnection(1).host,
                                                    port: _this.getActiveConnection(1).port
                                                }
                                            });
                                        }, 0, false);
                                    });
                                });
                            }, 0, false);
                        }],
                        ['<i class="fa fa-server"></i> Restore Guest Files', function ($itemScope) {
                            $log.debug('Infrastructure Manager [%s] -> Ask for recovery VM Guest Files -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                            smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                            // Wait for next digest circle before continue
                            $timeout(function () {
                                var modalInstance = modalFactory.openRegistredModal('question', '.window--smanager .window__main',
                                    {
                                        title: function () {
                                            return 'Instant VM recovery';
                                        },
                                        text: function () {
                                            return 'Do you want to perform a VM Guest Files recovery of ' + $itemScope.vm.name + '?';
                                        }
                                    }
                                );
                                modalInstance.result.then(function (res) {

                                    if (res !== true) return;
                                    ApplicationsFactory.openApplication('backupsm').then(function () {

                                        // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                                        $timeout(function () {
                                            ApplicationsFactory.toggleApplication('backupsm');

                                            $log.debug('Infrastructure Manager [%s] -> Launching Backups Manager for recovery VM Guest Files -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                                            $rootScope.$broadcast('backupsm__restore_vm_guest_files', {
                                                storage: connectionsFactory.getConnectionByUuid(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).storage),
                                                /* jshint ignore:start */
                                                vserver: eval(connectionsFactory.getObjectByUuidMapping(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).vserver)),
                                                volume: eval(connectionsFactory.getObjectByUuidMapping(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).volume)),
                                                snapshots: eval(connectionsFactory.getObjectByUuidMapping(smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name).volume)).snapshots, //TODO: if only 1 snapshot this will be an object --> conver to array. TODO: some snapshots could not contain this VM
                                                /* jshint ignore:end */
                                                snapshot: '',
                                                ESXihosts: smanagerFactory.getESXihosts(),
                                                vm: $itemScope.vm,
                                                current_location: {
                                                    uuid: _this.getActiveConnection(1).uuid,
                                                    credential: _this.getActiveConnection(1).credential,
                                                    host: _this.getActiveConnection(1).host,
                                                    port: _this.getActiveConnection(1).port
                                                }
                                            });
                                        }, 0, false);
                                    });
                                });
                            }, 0, false);
                        }]
                    ]
                ],
                {
                    text: '<i class="fa fa-server"></i> Backup',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Launching VM Backup -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                        smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                        // Wait for next digest circle before continue
                        $timeout(function () {
                            if (!smanagerFactory.getLinkByVMwareDatastore(_this.getActiveConnection(1).uuid, $itemScope.vm.datastore.ManagedObjectReference.name)) {
                                return modalFactory.openLittleModal('Error while creating Backup', 'Not found any compatible NetApp storage. Make sure VMs that you want to backup are inside a NetApp volume and this is managed by SysOS.', '.window--smanager .window__main', 'plain');
                            }

                            ApplicationsFactory.openApplication('backupsm').then(function () {

                                // Wait for next digest circle before continue in order, preventing $element.click event to "re" toggle to current application
                                $timeout(function () {
                                    ApplicationsFactory.toggleApplication('backupsm');

                                    $rootScope.$broadcast('backupsm__backup_vm', {
                                        vm: $itemScope.vm,
                                        connection: _this.getActiveConnection(1)
                                    });
                                }, 0, false);
                            });
                        }, 0, false);
                    }
                },
                null,
                {
                    text: '<i class="fa fa-refresh"></i> Refresh',
                    click: function ($itemScope) {
                        $log.debug('Infrastructure Manager [%s] -> Refreshing VM -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);

                        smanagerFactory.setActiveConnection($itemScope.vm.config.uuid);

                        // Wait for next digest circle before continue
                        $timeout(function () {
                            $itemScope.vm.refreshing = true;

                            return smanagerFactory.refreshVM(eval(connectionsFactory.getObjectByUuidMapping($itemScope.vm.config.uuid)), _this.getActiveConnection(1)).then(function () {// jshint ignore:line
                                $log.debug('Infrastructure Manager [%s] -> Doing refreshVM successfully -> vm [%s]', $itemScope.vm.vm, $itemScope.vm.name);
                            }).catch(function (e) {
                                $log.error('Infrastructure Manager [%s] -> Error while refreshVM -> vm [%s] -> ', $itemScope.vm.vm, $itemScope.vm.name, e);

                                toastr.error(e, 'Refresh VM');
                                $itemScope.vm.refreshing = false;
                            });
                        }, 0, false);
                    }
                }
            ];
        }]);
}());

(function () {
    'use strict';
    smanagerApp.controller('smStatusController', ['$scope', '$filter', 'smanagerFactory', 'connectionsFactory', function ($scope, $filter, smanagerFactory, connectionsFactory) {

        var _this = this;

        /*
         * Bindings
         */

        $scope.$watch(function () {
            return connectionsFactory.connections();
        }, function (newValue) {
            _this.connections = newValue;
        });

        $scope.$watch(function () {
            return smanagerFactory.activeConnection();
        }, function (newValue) {
            _this.activeConnection = newValue;
        });

        this.getActiveConnection = function (parent) {
            if (!_this.activeConnection) return null;

            var foundByUuid = connectionsFactory.getConnectionByUuid(_this.activeConnection);
            if (foundByUuid) return foundByUuid;

            if (!foundByUuid) {
                var foundByUuidMapping = connectionsFactory.getObjectByUuidMapping(_this.activeConnection, parent);
                if (foundByUuidMapping) return eval(foundByUuidMapping); // jshint ignore:line
            }

            return false;
        };

    }]);
}());

(function () {
    'use strict';
    smanagerApp.factory('smanagerFactory', ['$rootScope', '$q', '$log', '$document', 'socket', 'toastr', 'uuid', 'ServerFactory', '$filter', 'modalFactory', 'netappFactory', 'connectionsFactory', 'vmwareFactory',
        function ($rootScope, $q, $log, $document, socket, toastr, uuid, ServerFactory, $filter, modalFactory, netappFactory, connectionsFactory, vmwareFactory) {
            var links = [];

            /** @namespace datastore.info.nas */
            /** @namespace datastore.info.nas.remotePath */
            /** @namespace res.data.propSet */
            /** @namespace data.data.returnval */
            /** @namespace datastore_vm.storage.perDatastoreUsage */
            /** @namespace datastore_vm.storage.perDatastoreUsage.unshared */
            /** @namespace datastore_vm.runtime.powerState */

            /*
             *
             * PRIVATE FUNCTIONS
             *
             */
            var activeConnection = null;

            /**
             * @params
             * type {String} [vmware, netapp] New node type to check against
             * uuid {uuid} Main node uuid
             */
            //TODO: some storages could have the same LIF IP!!! and links will be wrong
            var checkLinkBetweenManagedNodes = function (type, uuid) {

                var connection = connectionsFactory.getConnectionByUuid(uuid);

                if (type === 'vmware') {

                    // Get all connection datastores
                    angular.forEach(connection.datastores, function (datastore) {

                        if (datastore.summary.type === 'VMFS') return;

                        // Check if any storage volume contains the datastore remotePath as a volume junction path
                        angular.forEach(connectionsFactory.connections().storage, function (storage) {

                            // Checking for NetApp storage
                            if (storage.type === 'NetApp') {

                                // check if storage have any interface that match the datastore.remoteHost and
                                // datastore.type
                                var foundInterface = $filter('filter')(storage.netifaces, {
                                    'address': datastore.info.nas.remoteHost,
                                    'data-protocols': {
                                        'data-protocol': datastore.info.nas.type
                                    }
                                })[0];

                                // If not found any storage interface matching, return
                                if (!foundInterface) return;

                                // Search any Data Vservers with allowed protocol that match the datastore.type
                                var foundVserver = $filter('filter')(storage.vservers, {
                                    'vserver-type': 'data',
                                    'vserver-name': foundInterface.vserver,
                                    'allowed-protocols': {
                                        'protocol': datastore.info.nas.type
                                    }
                                })[0];

                                if (!foundVserver) return;

                                // Search for each Volume containing as a junction path the current datastore remotePath
                                var foundVolume = $filter('filter')(foundVserver.volumes, {
                                    'volume-id-attributes': {
                                        'junction-path': datastore.info.nas.remotePath
                                    }
                                })[0];

                                if (!foundVolume) return;

                                // TODO: CHECK VOLUME EXPORTS that match ESXi host

                                // Link found!
                                links.push({
                                    virtual: uuid,
                                    esxi_datastore: datastore.obj.name,
                                    storage: storage.uuid,
                                    vserver: foundVserver.uuid,
                                    volume: foundVolume['volume-id-attributes'].uuid,
                                    junction_path: datastore.info.nas.remotePath
                                });

                            }// end NetApp
                        });// end storage
                    });// end datastore
                }// end vmware

                if (type === 'netapp') {

                    // Get all vmware connections
                    angular.forEach(connectionsFactory.connections().virtual, function (virtual) {

                        if (virtual.type === 'vCenter' || virtual.type === 'ESXi') {

                            // Get all vmware datastores
                            angular.forEach(virtual.datastores, function (datastore) {

                                if (datastore.summary.type === 'VMFS') return;

                                // check if connection have any interface that match the vmware datastore.remoteHost
                                // and datastore.type
                                var foundInterface = $filter('filter')(connection.netifaces, {
                                    'address': datastore.info.nas.remoteHost,
                                    'data-protocols': {
                                        'data-protocol': datastore.info.nas.type
                                    }
                                })[0];

                                // If not found any storage interface matching, return
                                if (!foundInterface) return;

                                var foundVserver = $filter('filter')(connection.vservers, {
                                    'vserver-type': 'data',
                                    'vserver-name': foundInterface.vserver,
                                    'allowed-protocols': {
                                        'protocol': datastore.info.nas.type
                                    }
                                })[0];

                                if (!foundVserver) return;

                                // Search for each Volume containing as a junction path the current datastore remotePath
                                var foundVolume = $filter('filter')(foundVserver.volumes, {
                                    'volume-id-attributes': {
                                        'junction-path': datastore.info.nas.remotePath
                                    }
                                })[0];

                                if (!foundVolume) return;

                                // Link found!
                                links.push({
                                    virtual: virtual.uuid,
                                    esxi_datastore: datastore.obj.name,
                                    storage: uuid,
                                    vserver: foundVserver.uuid,
                                    volume: foundVolume['volume-id-attributes'].uuid,
                                    junction_path: datastore.info.nas.remotePath
                                });

                            });// end datastore
                        }// end vmware
                    });// end virtual
                }// end netapp

                return links;

            };

            /*
             *
             * PUBLIC FUNCTIONS
             *
             */

            /**
             * @description
             * Return a link if found
             *
             * @params
             * virtual_uuid {String}
             * esxi_datastore {String}
             */
            var getLinkByVMwareDatastore = function (virtual_uuid, esxi_datastore) {
                return $filter('filter')(links, {
                    virtual: virtual_uuid,
                    esxi_datastore: esxi_datastore
                })[0];
            };

            /**
             * @description
             * Return a link if found
             *
             * @params
             * virtual_uuid {String}
             * junction_path {String}
             */
            var getLinkByStorageJunctionPath = function (virtual_uuid, volume, junction_path) {

                // Get Datastore name by Junction Path
                return $filter('filter')(links, {
                    storage: virtual_uuid,
                    volume: volume,
                    junction_path: junction_path
                })[0];
            };

            /**
             * @description
             * Get all data from VMware vCenter node
             *
             * @param connection {Object}
             */
            var getVMwareData = function (connection) {
                var dt_promises = [];
                var dc_promises = [];
                var ct_promises = [];
                var ht_promises = [];
                var foundDatacenterFolder;

                var modalInstance = modalFactory.openLittleModal('PLEASE WAIT', 'Connecting to vCenter/ESXi...', '.window--smanager .window__main', 'plain');

                return modalInstance.opened.then(function () {

                    // Get client version
                    return vmwareFactory.getClientVersion(connection.host, connection.port);
                }).then(function (data) {
                    //TODO: check if version is compatible

                    angular.extend(connectionsFactory.getConnectionByUuid(connection.uuid), {
                        hostname: connection.host,
                        apiVersion: data.data.apiVersion[0],
                        downloadUrl: data.data.downloadUrl[0],
                        exactVersion: data.data.exactVersion[0],
                        flexClientVersion: data.data.flexClientVersion[0],
                        patchVersion: data.data.patchVersion[0],
                        version: data.data.apiVersion[0],
                        authdPort: (data.data.authdPort ? data.data.authdPort[0] : null),
                        type: (data.data.authdPort ? 'ESXi' : 'vCenter')
                    });

                    // Login to vmware
                    return ServerFactory.connectVcenter(connection.host, connection.credential, connection.port);
                }).then(function (data) {
                    if (data.data.status === 'error') throw new Error(data.data.data);

                    return vmwareFactory.connectvCenterSoap(connection.credential, connection.host, connection.port);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to connect to ' + connectionsFactory.getConnectionByUuid(connection.uuid).type);

                    modalFactory.changeModalText('Checking SysOS extension...', '.window--smanager .window__main');

                    // Get SysOS management extension
                    return vmwareFactory.findSysOSExtension(connection.credential, connection.host, connection.port);

                }).then(function (data) {

                    // Register extension if not registered
                    if (!data.data.returnval) return vmwareFactory.registerExtension(connection.credential, connection.host, connection.port);

                }).then(function () {

                    modalFactory.changeModalText('Getting data...', '.window--smanager .window__main');

                    // Get Datacenters
                    return ServerFactory.callVcenter(connection.host, connection.port, '/rest/vcenter/datacenter');

                }).then(function (data) {

                    connectionsFactory.getConnectionByUuid(connection.uuid).datacenters = data.data.data.response.value;

                    // For each Datacenter
                    angular.forEach(connectionsFactory.getConnectionByUuid(connection.uuid).datacenters, function (datacenter, key) {

                        // Get Host not in Cluster (standalone)
                        dt_promises.push(ServerFactory.callVcenter(connection.host, connection.port, '/rest/vcenter/host?filter.datacenters=' + datacenter.datacenter + '&filter.standalone=true').then(function (data) {
                            connectionsFactory.getConnectionByUuid(connection.uuid).datacenters[key].hosts = data.data.data.response.value;

                            // For each Host
                            angular.forEach(connectionsFactory.getConnectionByUuid(connection.uuid).datacenters[key].hosts, function (host, i) {

                                // Get resource pools per Host
                                ht_promises.push(ServerFactory.callVcenter(connection.host, connection.port, '/rest/vcenter/resource-pool?filter.hosts=' + host.host).then(function (data) {
                                    connectionsFactory.getConnectionByUuid(connection.uuid).datacenters[key].hosts[i].resource_pools = data.data.data.response.value;
                                }));

                            });

                            return $q.all(ht_promises);
                        }));
                    });

                    return $q.all(dt_promises);

                }).then(function () {

                    // For each Datacenter
                    angular.forEach(connectionsFactory.getConnectionByUuid(connection.uuid).datacenters, function (datacenter, key) {

                        // Get Clusters
                        dc_promises.push(ServerFactory.callVcenter(connection.host, connection.port, '/rest/vcenter/cluster?filter.datacenters=' + datacenter.datacenter).then(function (data) {

                            connectionsFactory.getConnectionByUuid(connection.uuid).datacenters[key].clusters = data.data.data.response.value;

                            // For each Cluster
                            angular.forEach(connectionsFactory.getConnectionByUuid(connection.uuid).datacenters[key].clusters, function (cluster, c) {

                                // Get resource pools per cluster
                                ct_promises.push(ServerFactory.callVcenter(connection.host, connection.port, '/rest/vcenter/resource-pool?filter.datacenters=' + datacenter.datacenter + '&filter.clusters=' + cluster.cluster).then(function (data) {
                                    connectionsFactory.getConnectionByUuid(connection.uuid).datacenters[key].clusters[c].resource_pools = data.data.data.response.value;
                                }));

                                // Get Host per Cluster
                                ct_promises.push(ServerFactory.callVcenter(connection.host, connection.port, '/rest/vcenter/host?filter.datacenters=' + datacenter.datacenter + '&filter.clusters=' + cluster.cluster).then(function (data) {
                                    connectionsFactory.getConnectionByUuid(connection.uuid).datacenters[key].clusters[c].hosts = data.data.data.response.value;
                                }));

                            });

                            return $q.all(ct_promises);
                        }));
                    });

                    return $q.all(dc_promises);

                }).then(function () {

                    // Get Folders
                    return ServerFactory.callVcenter(connection.host, connection.port, '/rest/vcenter/folder');
                }).then(function (res) {

                    connectionsFactory.getConnectionByUuid(connection.uuid).folders = res.data.data.response.value;

                    //TODO: more than 1 datacenter?¿??¿?¿
                    foundDatacenterFolder = $filter('filter')(res.data.data.response.value, {
                        type: 'DATACENTER'
                    })[0];

                    // Get VMs
                    return getVMs(connection.uuid, false, foundDatacenterFolder);
                }).then(function () {

                    // Get datastores
                    return vmwareFactory.getDatastores(connection.credential, connection.host, connection.port, foundDatacenterFolder.folder);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to get Datastores from ' + connectionsFactory.getConnectionByUuid(connection.uuid).type);

                    connectionsFactory.getConnectionByUuid(connection.uuid).datastores = res.data;

                    // Check if any datastore is from a managed storage system and link it.
                    return checkLinkBetweenManagedNodes('vmware', connection.uuid);
                }).then(function (data) {

                    modalFactory.changeModalText('Saving connection to file', '.window--smanager .window__main');

                    connectionsFactory.saveLinksMap(data);
                    connectionsFactory.saveUuidMap();
                    connectionsFactory.saveConnection(connectionsFactory.getConnectionByUuid(connection.uuid));
                    modalFactory.closeModal('.window--smanager .window__main');

                }).catch(function (e) {

                    modalFactory.closeModal('.window--smanager .window__main');

                    if (e.message === 'ENOTFOUND') {
                        return toastr.error('Host not found (' + connection.host + ')', 'Error trying to connect to ' + connectionsFactory.getConnectionByUuid(connection.uuid).type);
                    }

                    if (e.message === 'ETIMEDOUT') {
                        return toastr.error('Timeout while connecting to ' + connection.host, 'Error trying to connect to ' + connectionsFactory.getConnectionByUuid(connection.uuid).type);
                    }

                    if (e.message === 'Unauthorized') {
                        return toastr.error('Invalid credentials (' + connection.host + ')', 'Error trying to connect to ' + connectionsFactory.getConnectionByUuid(connection.uuid).type);
                    }

                    toastr.error(e.message, 'Error getting data from ' + connectionsFactory.getConnectionByUuid(connection.uuid).type);

                    console.log(e);
                    throw new Error(e);
                });

            };

            /**
             * @description
             * Get all
             *
             * @param uuid {String}
             * @param save {Boolean}
             * @param foundDatacenterFolder* {Object}
             */
            var getVMs = function (uuid, save, foundDatacenterFolder) {
                if (!uuid) throw new Error('uuid_not_found');

                var newVMs = 0;
                var totalOldVMs = connectionsFactory.getConnectionByUuid(uuid).vms.length;
                var totalVMs;
                var foundVMinUuidMap;
                var connection = connectionsFactory.getConnectionByUuid(uuid);

                $log.debug('Infrastructure Manager [%s] -> Getting vCenter VMs -> hosts [%s]', uuid, connection.host);

                if (!foundDatacenterFolder) {
                    foundDatacenterFolder = $filter('filter')(connection.folders, {
                        type: 'DATACENTER'
                    })[0];
                }

                return vmwareFactory.connectvCenterSoap(connection.credential, connection.host, connection.port).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to connect to ' + connectionsFactory.getConnectionByUuid(uuid).type);

                    return vmwareFactory.getVMs(connection.credential, connection.host, connection.port, foundDatacenterFolder.folder);

                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to get VMs from ' + connectionsFactory.getConnectionByUuid(uuid).type);

                    totalVMs = res.data.length;

                    connectionsFactory.getConnectionByUuid(uuid).vms = res.data;

                    // For each VM
                    angular.forEach(connectionsFactory.getConnectionByUuid(uuid).vms, function (vm, x) {

                        vm.vm = vm.obj.name;

                        // Check if uuid is in uuidMap array
                        foundVMinUuidMap = $filter('filter')(connectionsFactory.getUuidMap(), {
                            uuid: vm.config.uuid,
                            parent: uuid
                        })[0];

                        // Push new VM
                        if (!foundVMinUuidMap) {
                            ++newVMs;

                            $log.debug('Infrastructure Manager [%s] -> Getting vCenter VMs. Found new VM -> hosts [%s], vm [%s]', uuid, connection.host, vm.name);

                            connectionsFactory.getUuidMap().push({
                                uuid: vm.config.uuid,
                                parent: uuid,
                                object: 'vms[' + x + ']'
                            });
                        }

                    });

                    $log.debug('Infrastructure Manager [%s] -> Getting vCenter VMs. Finish -> hosts [%s], totalOldVMs [%s], totalVMs [%s], newVMs [%s]', uuid, connection.host, totalOldVMs, totalVMs, newVMs);

                    // Save
                    if (save && newVMs !== 0 || save && totalOldVMs !== totalVMs) {
                        connectionsFactory.saveUuidMap();
                        connectionsFactory.saveConnection(connectionsFactory.getConnectionByUuid(uuid));
                    }

                }).catch(function (e) {
                    $log.error('Infrastructure Manager [%s] -> Error while getting vCenter VMs ->', uuid, e);

                    throw e;
                });
            };

            /**
             * @description
             * Get all data from NetApp node
             *
             * @param connection {Object}
             */
            var getNetAppData = function (connection) {
                var main_promises = [];
                var vs_promises = [];
                var sh_promises = [];

                /* TODO: GET netappinfo from SNMP OID:
                 1.3.6.1.4.1.789.1.1.2.0
                 1.3.6.1.2.1.1.5.0
                 1.3.6.1.4.1.789.1.1.7.0
                 */

                var modalInstance = modalFactory.openLittleModal('PLEASE WAIT', 'Connecting to NetApp...', '.window--smanager .window__main', 'plain');

                return modalInstance.opened.then(function () {

                    // Get NetApp Version
                    return netappFactory.getSystemVersion(connection.credential, connection.host, connection.port);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to get NetApp System Version');

                    //TODO: check if version is compatible

                    angular.extend(connectionsFactory.getConnectionByUuid(connection.uuid), {
                        hostname: connection.host,
                        buildtimestamp: res.build_timestamp,
                        isclustered: res.is_clustered,
                        version: res.version,
                        versiontuple: res.version_tuple,
                        type: 'NetApp'
                    });

                    modalFactory.changeModalText('Getting data...', '.window--smanager .window__main');

                    // Get interfaces
                    // Get cluster data
                    // Get vServers
                    main_promises.push(netappFactory.getNetInterfaces(connection.credential, connection.host, connection.port));
                    main_promises.push(netappFactory.getFcpInterfaces(connection.credential, connection.host, connection.port));
                    main_promises.push(netappFactory.getMetrocluster(connection.credential, connection.host, connection.port));
                    main_promises.push(netappFactory.getClusterIdentity(connection.credential, connection.host, connection.port));
                    main_promises.push(netappFactory.getLicenses(connection.credential, connection.host, connection.port));
                    main_promises.push(netappFactory.getOntapiVersion(connection.credential, connection.host, connection.port));
                    main_promises.push(netappFactory.getVservers(connection.credential, connection.host, connection.port));

                    return $q.all(main_promises);

                }).then(function (res) {

                    // Set interfaces
                    connectionsFactory.getConnectionByUuid(connection.uuid).netifaces = res[0].data;
                    connectionsFactory.getConnectionByUuid(connection.uuid).fcpifaces = res[1].data;

                    // Set cluster data
                    connectionsFactory.getConnectionByUuid(connection.uuid).metrocluster = res[2].data;
                    connectionsFactory.getConnectionByUuid(connection.uuid).cluster = res[3].data;
                    connectionsFactory.getConnectionByUuid(connection.uuid).licenses = res[4].data;
                    connectionsFactory.getConnectionByUuid(connection.uuid).ontapi_version = res[5].data;

                    // Set vServers
                    connectionsFactory.getConnectionByUuid(connection.uuid).vservers = res[6].data;

                    // Set new uuid to match internal node uuid
                    connectionsFactory.getUuidMap()[connectionsFactory.getUuidMap().findIndex(function (el) {
                        return el.uuid === connection.uuid;
                    })].uuid = res[3].data.cluster_uuid;
                    connectionsFactory.getConnectionByUuid(connection.uuid).uuid = res[3].data.cluster_uuid;

                    connection.uuid = res[3].data.cluster_uuid;

                    // Set new uuid as activeConnection
                    activeConnection = res[3].data.cluster_uuid;

                    angular.forEach(res[6].data, function (vserver, key) {

                        connectionsFactory.getUuidMap().push({
                            uuid: vserver.uuid,
                            parent: connection.uuid,
                            object: 'vservers[' + key + ']'
                        });

                        if (vserver['vserver-type'] === 'admin') {
                            connectionsFactory.getConnectionByUuid(connection.uuid).name = vserver['vserver-name'];
                        }

                        // GET Volumes per vServer
                        if (vserver['vserver-type'] === 'data') {

                            // Get qtrees
                            vs_promises.push(netappFactory.getQtrees(connection.credential, connection.host, connection.port, vserver['vserver-name']).then(function (qtrees) {
                                if (qtrees.status === 'error') throw new Error('Failed to get qtrees');

                                connectionsFactory.getConnectionByUuid(connection.uuid).vservers[key].qtrees = qtrees.data;
                            }));

                            vs_promises.push(netappFactory.getVolumes(connection.credential, connection.host, connection.port, vserver['vserver-name']).then(function (volumes) {
                                if (volumes.status === 'error') throw new Error('Failed to get volumes');

                                connectionsFactory.getConnectionByUuid(connection.uuid).vservers[key].volumes = volumes.data;

                                // For each Volume
                                angular.forEach(volumes.data, function (volume, v) {

                                    connectionsFactory.getUuidMap().push({
                                        uuid: volume['volume-id-attributes'].uuid,
                                        parent: vserver['uuid'],
                                        object: 'volumes[' + v + ']'
                                    });

                                    // Get all LUNS
                                    sh_promises.push(netappFactory.getLuns(connection.credential, connection.host, connection.port, vserver['vserver-name'], volume['volume-id-attributes'].name).then(function (luns) {
                                        if (luns.status === 'error') throw new Error('Failed to get LUNs');

                                        connectionsFactory.getConnectionByUuid(connection.uuid).vservers[key].volumes[v].luns = luns.data;
                                    }));

                                    // Get all Snapshots
                                    sh_promises.push(netappFactory.getSnapshots(connection.credential, connection.host, connection.port, vserver['vserver-name'], volume['volume-id-attributes'].name).then(function (snapshots) {
                                        if (snapshots.status === 'error') throw new Error('Failed to get snapshots');

                                        connectionsFactory.getConnectionByUuid(connection.uuid).vservers[key].volumes[v].snapshots = snapshots.data;

                                        // For each snapshot
                                        angular.forEach(snapshots.data, function (snapshot, s) {

                                            connectionsFactory.getUuidMap().push({
                                                uuid: snapshot['snapshot-instance-uuid'],
                                                parent: volume['volume-id-attributes'].uuid,
                                                object: 'snapshots[' + s + ']'
                                            });

                                        });
                                    }));
                                });

                                return $q.all(sh_promises);

                            }));
                        }

                    });

                    return $q.all(vs_promises);
                }).then(function () {

                    // Check if any volume is mounted to a managed virtual node and link it.
                    return checkLinkBetweenManagedNodes('netapp', connection.uuid);

                }).then(function (data) {
                    modalFactory.changeModalText('Saving connection to file', '.window--smanager .window__main');

                    connectionsFactory.saveLinksMap(data);
                    connectionsFactory.saveConnection(connectionsFactory.getConnectionByUuid(connection.uuid));
                    connectionsFactory.saveUuidMap();
                    modalFactory.closeModal('.window--smanager .window__main');

                }).catch(function (e) {
                    if (e.message === 'ENOTFOUND') {
                        modalFactory.closeModal('.window--smanager .window__main');
                        return toastr.error('Host not found (' + connection.host + ')', 'Error trying to connect to NetApp');
                    }

                    if (e.message === 'ETIMEDOUT') {
                        modalFactory.closeModal('.window--smanager .window__main');
                        return toastr.error('Timeout while connecting to ' + connection.host, 'Error trying to connect to NetApp');
                    }

                    modalFactory.closeModal('.window--smanager .window__main');
                    toastr.error(e.message, 'Error getting data from NetApp');

                    console.log(e);
                    throw new Error(e);
                });
            };

            /**
             * @description
             * Refresh NetApp volume data
             *
             * @param data {Object}
             */
            var getVolumeData = function (data) {
                var vserver_index = connectionsFactory.getConnectionByUuid(data.uuid).vservers.findIndex(function (item) {
                    return item['vserver-name'] === data.vserver_name;
                });
                var volume_index = connectionsFactory.getConnectionByUuid(data.uuid).vservers[vserver_index].volumes.findIndex(function (item) {
                    return item['volume-id-attributes'].name === data.volume_name;
                });

                var modalInstance = modalFactory.openLittleModal('PLEASE WAIT', 'Getting NetApp Volume data...', '.window--smanager .window__main', 'plain');
                return modalInstance.opened.then(function () {
                    return netappFactory.getSnapshots(data.credential, data.host, data.port, data.vserver_name, data.volume_name).then(function (snapshots) {
                        if (snapshots.status === 'error') throw new Error('Failed to get snapshots');

                        //TODO: angular.merge?
                        connectionsFactory.getConnectionByUuid(data.uuid).vservers[vserver_index].volumes[volume_index].snapshots = snapshots.data;

                        // For each snapshot
                        angular.forEach(snapshots.data, function (snapshot, s) {

                            connectionsFactory.getUuidMap().push({
                                uuid: snapshot['snapshot-instance-uuid'],
                                parent: data.volume_uuid,
                                object: 'snapshots[' + s + ']'
                            });

                        });
                    }).then(function () {
                        modalFactory.changeModalText('Saving connection to file', '.window--smanager .window__main');

                        connectionsFactory.saveConnection(connectionsFactory.getConnectionByUuid(data.uuid));
                        connectionsFactory.saveUuidMap();

                        modalFactory.closeModal('.window--smanager .window__main');
                    }).catch(function (e) {
                        modalFactory.closeModal('.window--smanager .window__main');

                        throw e;
                    });
                });
            };

            /**
             * @description
             * Fetch NetApp SnapShots
             */
            var getSnapshotFiles = function (uuid, host, vserver, volume, snapshot) {
                var link;
                var datastore_index;
                var datastore_vm;
                var esxi_host;

                var vserver_index = connectionsFactory.getConnectionByUuid(uuid).vservers.findIndex(function (item) {
                    return item['vserver-name'] === vserver;
                });
                var volume_index = connectionsFactory.getConnectionByUuid(uuid).vservers[vserver_index].volumes.findIndex(function (item) {
                    return item['volume-id-attributes'].name === volume;
                });
                var snapshot_index = connectionsFactory.getConnectionByUuid(uuid).vservers[vserver_index].volumes[volume_index].snapshots.findIndex(function (item) {
                    return item.name === snapshot;
                });

                // Already fetched files from storage, don't ask for it again
                if (angular.isDefined(connectionsFactory.getConnectionByUuid(uuid).vservers[vserver_index].volumes[volume_index].snapshots[snapshot_index].files)) return $q.resolve();
                connectionsFactory.getConnectionByUuid(uuid).vservers[vserver_index].volumes[volume_index].snapshots[snapshot_index].vms = [];

                var modalInstance = modalFactory.openLittleModal('PLEASE WAIT', 'Getting Snapshot data...', '.window--smanager .window__main', 'plain');

                return modalInstance.opened.then(function () {

                    return netappFactory.getSnapshotFiles(connectionsFactory.getConnectionByUuid(uuid).credential, host, connectionsFactory.getConnectionByUuid(uuid).port, vserver, volume, snapshot);
                }).then(function (files) {
                    if (files.status === 'error') throw new Error('Failed to get Snapshot files');

                    connectionsFactory.getConnectionByUuid(uuid).vservers[vserver_index].volumes[volume_index].snapshots[snapshot_index].files = files.data;

                    // Check every file
                    angular.forEach(files.data, function (file) {

                        // VM found
                        if (!file.hasOwnProperty('name')) {
                            console.log(file);
                            return;
                        }
                        if (file.name.substr(file.name.length - 4) === '.vmx') {

                            // Get vCenter Link by Storage Junction Path
                            link = getLinkByStorageJunctionPath(
                                uuid,
                                connectionsFactory.getConnectionByUuid(uuid).vservers[vserver_index].volumes[volume_index]['volume-id-attributes'].uuid,
                                connectionsFactory.getConnectionByUuid(uuid).vservers[vserver_index].volumes[volume_index]['volume-id-attributes']['junction-path']
                            );

                            if (link) {

                                // Get datastore_index using returned link
                                datastore_index = connectionsFactory.getConnectionByUuid(link.virtual).datastores.findIndex(function (item) {
                                    return item.obj.name === link.esxi_datastore;
                                });

                                // Search for VM using returned Storage file .vmx path
                                datastore_vm  = $filter('filter')(connectionsFactory.getConnectionByUuid(link.virtual).vms, {
                                    'vm': connectionsFactory.getConnectionByUuid(link.virtual).datastores[datastore_index].vm.ManagedObjectReference.name,
                                    'datastore': {
                                        'ManagedObjectReference': {
                                            'name': link.esxi_datastore
                                        }
                                    },
                                    'config': {
                                        'files': {
                                            'vmPathName': '[' + connectionsFactory.getConnectionByUuid(link.virtual).datastores[datastore_index].name + '] ' + file.path.substring(1) + '/' + file.name
                                        }
                                    }
                                })[0];

                                // Get Host name by host Id
                                esxi_host = $filter('filter')(getESXihosts(), {
                                    'connection_address': connectionsFactory.getConnectionByUuid(link.virtual).host,
                                    'host': datastore_vm.runtime.host.name
                                })[0];

                            }

                            connectionsFactory.getConnectionByUuid(uuid).vservers[vserver_index].volumes[volume_index].snapshots[snapshot_index].vms.push({
                                name: (datastore_vm ? datastore_vm.name : file.name.slice(0, -4)),
                                host: (esxi_host ? esxi_host.name : 'Unknown'),
                                state: (datastore_vm ? datastore_vm.runtime.powerState : 'Unknown'),
                                size: (datastore_vm ? datastore_vm.storage.perDatastoreUsage.unshared : 'Unknown'),
                                path: file.path + '/' + file.name,
                                virtual: (link ? link.virtual : ''),
                                vm: (datastore_vm ? datastore_vm : null)
                            });

                        }

                    });

                    modalFactory.changeModalText('Saving connection to file', '.window--smanager .window__main');

                    connectionsFactory.saveConnection(connectionsFactory.getConnectionByUuid(uuid));

                    modalFactory.closeModal('.window--smanager .window__main');

                }).catch(function (e) {
                    modalFactory.closeModal('.window--smanager .window__main');

                    throw e;
                });
            };

            /**
             * @description
             * Gets all ESXi hosts from all existing vCenter connections
             */
            var getESXihosts = function () {
                var connections = connectionsFactory.connections();
                var ESXihosts = [];

                angular.forEach(connections.virtual, function (vcenter) {
                    angular.forEach(vcenter.datacenters, function (datacenter) {

                        // Standalone hosts
                        angular.forEach(datacenter.hosts, function (host) {
                            // Setup basic connection information required for "Backups Manager" application
                            ESXihosts.push({
                                connection_uuid: vcenter.uuid,
                                connection_state: host.connection_state,
                                host: host.host,
                                name: host.name,
                                power_state: host.power_state,
                                connection_credential: vcenter.credential,
                                connection_address: vcenter.host,
                                connection_port: vcenter.port,
                                datacenter: datacenter.datacenter
                            });
                        });

                        // Cluster hosts
                        angular.forEach(datacenter.clusters, function (cluster) {
                            angular.forEach(cluster.hosts, function (host) {
                                // Setup basic connection information required for "Backups Manager" application
                                ESXihosts.push({
                                    connection_uuid: vcenter.uuid,
                                    connection_state: host.connection_state,
                                    host: host.host,
                                    name: host.name,
                                    power_state: host.power_state,
                                    connection_credential: vcenter.credential,
                                    connection_address: vcenter.host,
                                    connection_port: vcenter.port,
                                    datacenter: datacenter.datacenter
                                });
                            });
                        });

                    });
                });

                return ESXihosts;
            };

            /**
             * VM operations
             */
            var powerOnVM = function (credential, host, port, vm) {
                return vmwareFactory.connectvCenterSoap(credential, host, port).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to connect to vCenter');

                    return vmwareFactory.getVMRuntime(credential, host, port, vm);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to get VM runtime');
                    if (res.data.propSet.runtime.powerState === 'poweredOn') return res;

                    return vmwareFactory.powerOnVM(credential, host, port, res.data.propSet.runtime.host.name, vm);

                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to power on VM');

                }).catch(function (e) {
                    throw e;
                });
            };

            var powerOffVM = function (credential, host, port, vm) {
                return vmwareFactory.connectvCenterSoap(credential, host, port).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to connect to vCenter');

                    return vmwareFactory.getVMRuntime(credential, host, port, vm);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to get VM runtime');
                    if (res.data.propSet.runtime.powerState === 'poweredOff') return res;

                    return vmwareFactory.powerOffVM(credential, host, port, vm);

                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to power off VM');

                }).catch(function (e) {
                    throw e;
                });
            };

            var suspendVM = function (credential, host, port, vm) {
                return vmwareFactory.connectvCenterSoap(credential, host, port).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to connect to vCenter');

                    return vmwareFactory.getVMRuntime(credential, host, port, vm);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to get VM runtime');

                    if (res.data.propSet.runtime.powerState !== 'poweredOn') return res;
                    return vmwareFactory.suspendVM(credential, host, port, vm);

                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to suspend VM');

                }).catch(function (e) {
                    throw e;
                });
            };

            var resetVM = function (credential, host, port, vm) {
                return vmwareFactory.connectvCenterSoap(credential, host, port).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to connect to vCenter');

                    return vmwareFactory.getVMRuntime(credential, host, port, vm);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to get VM runtime');
                    if (res.data.propSet.runtime.powerState !== 'poweredOn') return res;

                    return vmwareFactory.resetVM(credential, host, port, vm);

                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to reset VM');

                }).catch(function (e) {
                    throw e;
                });
            };

            var shutdownGuest = function (credential, host, port, vm) {
                return vmwareFactory.connectvCenterSoap(credential, host, port).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to connect to vCenter');

                    return vmwareFactory.getVMRuntime(credential, host, port, vm);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to get VM runtime');
                    if (res.data.propSet.runtime.powerState !== 'poweredOn') return res;

                    return vmwareFactory.shutdownGuest(credential, host, port, vm);

                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to shutdown VM Guest OS');

                }).catch(function (e) {
                    throw e;
                });
            };

            var rebootGuest = function (credential, host, port, vm) {
                return vmwareFactory.connectvCenterSoap(credential, host, port).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to connect to vCenter');

                    return vmwareFactory.getVMRuntime(credential, host, port, vm);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to get VM runtime');
                    if (res.data.propSet.runtime.powerState !== 'poweredOn') return res;

                    return vmwareFactory.rebootGuest(credential, host, port, vm);

                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to restart VM Guest OS');

                }).catch(function (e) {
                    throw e;
                });
            };

            var refreshVM = function (vm, connection) {
                return vmwareFactory.connectvCenterSoap(connection.credential, connection.host, connection.port).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to connect to vCenter');

                    return vmwareFactory.getVMState(connection.credential, connection.host, connection.port, vm.vm, true);
                }).then(function (res) {
                    if (res.status === 'error') throw new Error('Failed to refresh VM');

                    res.data.vm = res.data.obj.name;

                    var vm_index = connectionsFactory.getConnectionByUuid(connection.uuid).vms.findIndex(function (item) {
                        return item.config.uuid === res.data.config.uuid;
                    });

                    connectionsFactory.getConnectionByUuid(connection.uuid).vms[vm_index] = res.data;
                    connectionsFactory.saveConnection(connectionsFactory.getConnectionByUuid(connection.uuid));
                }).catch(function (e) {
                    throw e;
                });
            };

            /**
             * @description
             * Socket data
             *
             * @param data {Object}
             */
            var newData = function (data) {
                if (data.type === 'interface_bandwidth') {

                    connectionsFactory.getConnectionByUuid(data.uuid)['interfaces'][data.data.interface].data.push(data.data.total);
                } else if (data.type === 'interfaces') {
                    connectionsFactory.getConnectionByUuid(data.uuid)['interfaces'] = [];
                    angular.forEach(data.data, function (iface) {
                        connectionsFactory.getConnectionByUuid(data.uuid)['interfaces'][iface] = [];
                        connectionsFactory.getConnectionByUuid(data.uuid)['interfaces'][iface].data = [];
                    });
                } else {
                    connectionsFactory.getConnectionByUuid(data.uuid)[data.type] = data.data;
                }
            };

            /**
             * @description
             * Socket data
             *
             * @param data {Object}
             */
            var newProp = function (data) {
                connectionsFactory.getConnectionByUuid(data.uuid)[data.prop] = data.text;

                // CONN CLOSE
                if (data.prop === 'status' && data.text === 'CONN CLOSE') {
                    connectionsFactory.getConnectionByUuid(data.uuid).state = 'disconnected';

                    // CON ERROR
                } else if (data.prop === 'status' && data.text !== 'SSH CONNECTION ESTABLISHED' && data.text !== 'SNMP CONNECTION ESTABLISHED') {

                    // Error connecting
                    if (connectionsFactory.getConnectionByUuid(data.uuid).state === 'new') {
                        connectionsFactory.getConnectionByUuid(data.uuid).state = 'disconnected';
                    }
                    connectionsFactory.getConnectionByUuid(data.uuid).error = data.text;
                    toastr.error(data.text, 'Error (' + connectionsFactory.getConnectionByUuid(data.uuid).host + ')');

                    // CONN OK
                } else if (data.text === 'SSH CONNECTION ESTABLISHED' || data.text === 'SNMP CONNECTION ESTABLISHED') {
                    connectionsFactory.getConnectionByUuid(data.uuid).state = 'connected';
                    connectionsFactory.getConnectionByUuid(data.uuid).error = null;
                    $rootScope.$broadcast('smanager__connection_connected', data.uuid);
                    toastr.success(data.text, 'Connected (' + connectionsFactory.getConnectionByUuid(data.uuid).host + ')');
                }
            };

            return {
                getLinkByVMwareDatastore: getLinkByVMwareDatastore,
                setLinks: function (data) {
                    links = data;
                },
                getSnapshotFiles: getSnapshotFiles,
                setActiveConnection: function (uuid) {
                    activeConnection = uuid;
                },
                activeConnection: function () {
                    return activeConnection;
                },
                getVMwareData: getVMwareData,
                getVMs: getVMs,
                getNetAppData: getNetAppData,
                getVolumeData: getVolumeData,
                getESXihosts: getESXihosts,
                powerOnVM: powerOnVM,
                powerOffVM: powerOffVM,
                suspendVM: suspendVM,
                resetVM: resetVM,
                shutdownGuest: shutdownGuest,
                rebootGuest: rebootGuest,
                refreshVM: refreshVM,
                newData: newData,
                newProp: newProp
            };

        }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/actions-smanager.html',
            '<div class="window__actions" ng-controller="smActionController as smA"> \
              <a class="window__item"  title="New connection" ng-click="smA.newConnection()"> \
                <i class="fa fa-plus text-success"></i> \
              </a> \
              <a class="window__item separator" ></a> \
              <a class="window__item"  title="Edit connection" ng-click="smA.editConnection()"> \
                <i class="fa fa-edit" ng-class="{\'text-primary\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="Disconnect" ng-if="smA.connections.length !== 0" ng-click="smA.disconnectConnection()"> \
                <i class="fa fa-close" ng-class="{\'text-danger\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="Delete" ng-if="smA.connections.length !== 0" ng-click="smA.deleteConnection()"> \
                <i class="fa fa-trash" ng-class="{\'text-danger\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="Connection options" ng-click="smA.configureConnection()"> \
                <i class="fa fa-cog" ng-class="{\'text-primary\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item separator" ></a> \
              <a class="window__item"  title="Power status"> \
                <i class="fa fa-power-off" ng-class="{\'text-danger\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="Refresh" ng-click="smA.remoteRefresh();"> \
                <i class="fa fa-refresh" ng-class="{\'text-success\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="SSH" ng-click="smA.openWithApp(\'ssh\')"> \
                <i class="fa fa-terminal" ng-class="{\'text-primary\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="File explorer"  ng-click="smA.openWithApp(\'sftp\')"> \
                <i class="fa fa-upload" ng-class="{\'text-primary\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="Hardware monitor"> \
                <i class="fa fa-microchip" ng-class="{\'text-primary\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="Alerts"> \
                <i class="fa fa-bullhorn" ng-class="{\'text-primary\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="Services"> \
                <i class="fa fa-cubes" ng-class="{\'text-primary\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="Firewall"> \
                <i class="fa fa-exchange" ng-class="{\'text-primary\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item"  title="HIDS" ng-click="smA.runHIDS()"> \
                <i class="fa fa-shield" ng-class="{\'text-primary\': smA.activeConnection != null}"></i> \
              </a> \
              <a class="window__item separator" ></a> \
            </div>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/body-smanager.html',
            '<div class="window__body with_status" ng-controller="smBodyController as smB"> \
              <div class="window__side" ng-if="smB.viewSide"> \
                <uib-accordion close-others="false"> \
                  <!-- Storage Infrastructure --> \
                  <div uib-accordion-group class="panel-success" is-open="true"> \
                    <uib-accordion-heading> \
                      <i class="fa m-t-f" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="fa fa-database m-t-f"></i> Storage Infrastructure \
                    </uib-accordion-heading> \
                    <uib-accordion close-others="false"> \
                      <!-- Host --> \
                      <div uib-accordion-group class="menu__item panel-default" ng-class="{\'active\': storage.uuid == smB.activeConnection}"ng-repeat="storage in smB.connections.storage" is-open="true"> \
                        <uib-accordion-heading> \
                          <span context-menu="smB.storageContextMenu"><i class="fa fa-fw fa-refresh fa-spin" ng-if="storage.refreshing"></i> <i class="fa level-one" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <img ng-src="/img/{{::storage.type}}-logo.png" width="16px" /> {{::storage.name}}<span> \
                        </uib-accordion-heading> \
                        <uib-accordion close-others="false"> \
                          <!-- vServers --> \
                          <div uib-accordion-group class="menu__item panel-default" ng-repeat="vserver in storage.vservers | filter: { \'vserver-type\': \'data\' }" is-open="false"> \
                            <uib-accordion-heading> \
                              <i class="fa level-two" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="fa fa-server"></i> {{::vserver[\'vserver-name\']}} \
                            </uib-accordion-heading> \
                            <uib-accordion close-others="false"> \
                              <!-- Volumes --> \
                              <div uib-accordion-group class="menu__item panel-default" ng-repeat="volume in vserver.volumes" is-open="false"> \
                                <uib-accordion-heading> \
                                  <span context-menu="smB.volumeContextMenu"><i class="fa fa-fw fa-refresh fa-spin" ng-if="volume.refreshing"></i> <i class="fa level-three" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="vs-icon vsphere-icon-datastore"></i> {{::volume[\'volume-id-attributes\'].name}}<span> \
                                </uib-accordion-heading> \
                                <!-- SnapShots --> \
                                <div class="menu__item panel-heading" ng-class="{\'active\': snapshot[\'snapshot-version-uuid\'] == smB.activeConnection}" ng-repeat="snapshot in volume.snapshots" ng-click="smB.getSnapshotFiles(storage.uuid, storage.hostname, vserver[\'vserver-name\'], volume[\'volume-id-attributes\'].name, snapshot.name); smB.setActiveConnection(snapshot, \'snapshot\')" context-menu="smB.snapshotContextMenu"> \
                                  <h4 class="panel-title"> \
                                    <i class="level-four fa fa-camera p-l-sm"></i><span> {{::snapshot.name}}</span> \
                                  </h4> \
                                </div> \
                              </div> \
                            </uib-accordion> \
                          </div> \
                        </uib-accordion> \
                      </div> \
                    </uib-accordion> \
                  </div> \
                </uib-accordion> \
                <uib-accordion close-others="false"> \
                  <!-- Virtual Infrastructure --> \
                  <div uib-accordion-group class="panel-success" is-open="true"> \
                    <uib-accordion-heading> \
                      <i class="fa m-t-f" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="fa fa-cloud m-t-f"></i> Virtual Infrastructure \
                    </uib-accordion-heading> \
                    <uib-accordion close-others="false"> \
                      <!-- virtual --> \
                      <div uib-accordion-group class="menu__item panel-default" ng-repeat="virtual in smB.connections.virtual" is-open="true"> \
                        <uib-accordion-heading> \
                          <span context-menu="smB.virtualContextMenu"><i class="fa fa-fw fa-refresh fa-spin" ng-if="virtual.refreshing"></i> <i class="fa level-one" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="vs-icon vsphere-icon-vcenter"></i> {{::virtual.hostname}}</span> \
                        </uib-accordion-heading> \
                        <uib-accordion close-others="false"> \
                          <!-- Datacenter --> \
                          <div uib-accordion-group class="menu__item panel-default" ng-repeat="datacenter in virtual.datacenters" is-open="true"> \
                            <uib-accordion-heading> \
                              <i class="fa level-two" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="vs-icon vsphere-icon-datacenter"></i> {{::datacenter.name}} \
                            </uib-accordion-heading> \
                            <uib-accordion close-others="false"> \
                              <!-- Clusters --> \
                              <div uib-accordion-group class="menu__item panel-default" ng-repeat="cluster in datacenter.clusters" is-open="true"> \
                                <uib-accordion-heading> \
                                  <i class="fa level-three" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="vs-icon vsphere-icon-cluster"></i> {{::cluster.name}} \
                                </uib-accordion-heading> \
                                <uib-accordion close-others="false"> \
                                  <!-- Hosts --> \
                                  <div class="panel-default panel panel-open" ng-repeat="host in cluster.hosts"> \
                                    <div class="menu__item panel-heading"> \
                                      <h4 class="panel-title"> \
                                        <a class="accordion-toggle"> \
                                          <span> \
                                            <i class="vs-icon level-five p-l-sm" ng-class="{\'vsphere-icon-host-disconnected\': host.power_state === \'POWERED_OFF\', \'vsphere-icon-host\': host.power_state === \'POWERED_ON\'}"></i><span> {{::host.name}}</span> \
                                          </span> \
                                        </a> \
                                      </h4> \
                                    </div> \
                                  </div> \
                                  <div uib-accordion-group class="panel-default" is-open="false"> \
                                    <uib-accordion-heading> \
                                      <i class="fa level-four" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="fa fa-folder"></i> VMs \
                                    </uib-accordion-heading> \
                                    <uib-accordion close-others="false"> \
                                      <!-- VMs --> \
                                      <div class="menu__item panel-heading" ng-repeat="vm in virtual.vms | filter: { runtime: { host: {name: cluster.hosts.name}}} | orderBy:\'name\'" ng-class="{\'active\': vm.config.uuid == smB.activeConnection}" ng-click="smB.setActiveConnection(vm, \'vm\')" context-menu="smB.VMContextMenu"> \
                                        <h4 class="panel-title pull-left absolute"> \
                                          <i class="fa fa-fw fa-refresh fa-spin" ng-if="vm.refreshing"></i> <i class="vs-icon level-six p-l-sm" ng-class="{\'vsphere-icon-vm\': vm.runtime.powerState === \'poweredOff\', \'vsphere-icon-vm-on\': vm.runtime.powerState === \'poweredOn\', \'vsphere-icon-vm-suspended\': vm.runtime.powerState === \'suspended\'}"></i> {{::vm.name}} \
                                        </h4> \
                                        <i class="fa fa-circle pull-right" ng-class="{\'text-danger\': vm.type == \'disconnected\', \'text-success\': vm.type == \'connected\'}"></i> \
                                        <i class="fa pull-right" ng-class="{\'fa-windows text-primary\': vm.guest.guestFamily == \'windowsGuest\', \'fa-linux text-danger\': vm.guest.guestFamily == \'linuxGuest\'}"></i> \
                                      </div> \
                                    </uib-accordion> \
                                  </div> \
                                </uib-accordion> \
                              </div> \
                            </uib-accordion> \
                            <uib-accordion close-others="false"> \
                              <!-- Standalone Hosts --> \
                              <div uib-accordion-group class="menu__item panel-default" ng-repeat="host in datacenter.hosts" is-open="true"> \
                                <uib-accordion-heading> \
                                  <i class="fa level-three" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="vs-icon" ng-class="{\'vsphere-icon-host-disconnected\': host.power_state === \'POWERED_OFF\', \'vsphere-icon-host\': host.power_state === \'POWERED_ON\'}"></i> {{::host.name}} \
                                </uib-accordion-heading> \
                                <div uib-accordion-group class="panel-default" is-open="false"> \
                                  <uib-accordion-heading> \
                                    <i class="fa level-four" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="fa fa-folder"></i> VMs \
                                  </uib-accordion-heading> \
                                  <uib-accordion close-others="false"> \
                                    <!-- VMs --> \
                                    <div class="menu__item panel-heading" ng-repeat="vm in virtual.vms | filter: { runtime: { host: {name: host.host}}} | orderBy:\'name\'" ng-class="{\'active\': vm.config.uuid == smB.activeConnection}" ng-click="smB.setActiveConnection(vm, \'vm\')" context-menu="smB.VMContextMenu"> \
                                      <h4 class="panel-title pull-left absolute"> \
                                        <i class="vs-icon level-six p-l-sm" ng-class="{\'vsphere-icon-vm\': vm.runtime.powerState === \'poweredOff\', \'vsphere-icon-vm-on\': vm.runtime.powerState === \'poweredOn\', \'vsphere-icon-vm-suspended\': vm.runtime.powerState === \'suspended\'}"></i> {{::vm.name}} \
                                      </h4> \
                                      <i class="fa fa-circle pull-right" ng-class="{\'text-danger\': vm.type == \'disconnected\', \'text-success\': vm.type == \'connected\'}"></i> \
                                      <i class="fa pull-right" ng-class="{\'fa-windows text-primary\': vm.guest.guestFamily == \'windowsGuest\', \'fa-linux text-danger\': vm.guest.guestFamily == \'linuxGuest\'}"></i> \
                                    </div> \
                                  </div> \
                                </uib-accordion> \
                              </div> \
                            </uib-accordion> \
                          </div>  \
                        </uib-accordion> \
                        <div uib-accordion-group class="panel-default" is-open="false"> \
                          <uib-accordion-heading> \
                            <i class="fa level-two" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="fa fa-folder"></i> Datastores \
                          </uib-accordion-heading> \
                          <uib-accordion close-others="false"> \
                            <!-- Datastores --> \
                            <div class="menu__item panel-heading" ng-repeat="datastore in virtual.datastores | orderBy:\'info.name\'" ng-class="{\'active\': datastore.obj.name == smB.activeConnection}" ng-click="smB.setActiveConnection(datastore, \'datastore\')"> \
                              <h4 class="panel-title"> \
                                <i class="vs-icon vsphere-icon-datastore level-four p-l-sm"></i> \
                                <img class="m-s-xss" src="/img/NetApp-logo.png" width="16px" src="/img/NetApp-logo.png" ng-if="::smB.getLinkByVMwareDatastore(virtual.uuid, datastore.obj.name).type === \'NetApp\'" uib-tooltip="{{::smB.getLinkByVMwareDatastore(virtual.uuid, datastore.obj.name).name}}"> \
                                {{::datastore.info.name}} \
                              </h4> \
                            </div> \
                          </uib-accordion> \
                        </div> \
                      </div> \
                    </uib-accordion> \
                  </div> \
                </uib-accordion> \
                <uib-accordion> \
                  <div uib-accordion-group class="panel-success" is-open="true"> \
                    <uib-accordion-heading> \
                      <i class="fa m-t-f" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="fa fa-server m-t-f"></i> Physical Infrastructure \
                    </uib-accordion-heading> \
                    <uib-accordion close-others="false"> \
                      <div uib-accordion-group class="panel-default" ng-repeat="folder in smB.getConnectionFolders(\'standalone\')" is-open="true"> \
                        <uib-accordion-heading> \
                          <i class="fa" ng-class="{\'fa-chevron-down\': $parent.isOpen, \'fa-chevron-right p-r-xxs\': !$parent.isOpen}"></i> <i class="fa fa-folder"></i> {{::folder}} \
                        </uib-accordion-heading> \
                        <div class="menu__item" ng-repeat="connection in smB.connections.standalone | filter: { folder: folder } track by $index" ng-class="{\'active\': connection.uuid == smB.activeConnection}" ng-click="smB.setActiveConnection(connection, \'standalone\')" ng-if="connection != undefined"> \
                          <span class="p-l-xl"> \
                            <i class="fa m-t-f p-l-sm" ng-class="{\'fa-linux\': connection.so === \'linux\', \'fa-windows\': connection.so === \'windows\', \'fa-server\': connection.so === \'snmp\'}"></i> {{::connection.description}} <small>({{::connection.host}})</small> \
                            <i class="fa fa-circle pull-right m-t-f" ng-class="{\'text-danger\': connection.type == \'disconnected\', \'text-success\': connection.type == \'connected\'}"></i> \
                          </span> \
                        </div> \
                      </div> \
                    </uib-accordion> \
                  </div> \
                </uib-accordion> \
                <div class="secondary-content__new__box__toggle pointer visible-lg"> \
                  <div class="secondary-content__new__box__toggle__slide" ng-click="smB.toggleSide()"> \
                    <i class="fa fa-arrow-left sidebar-open-font open-sidebar"></i> \
                  </div> \
                </div> \
              </div> \
              <div class="secondary-content__new__box__toggle toggle_left pointer visible-lg" ng-if="!smB.viewSide" ng-click="smB.toggleSide()"> \
                <i class="fa fa-arrow-right sidebar-open-font open-sidebar"></i> \
              </div> \
              <div class="window__main"> \
                <div ng-if="smB.showvCenter == true"> \
                  <div ng-include="\'templates/applications/vcenter-type-smanager.html\'" include-replace></div> \
                </div> \
                <div ng-if="smB.showVm == true"> \
                  <div ng-include="\'templates/applications/vm-type-smanager.html\'" include-replace></div> \
                </div> \
                <div ng-if="smB.showSnapshot == true"> \
                  <div ng-include="\'templates/applications/snapshot-type-smanager.html\'" include-replace></div> \
                </div> \
                <div ng-if="smB.showStandalone == true && smB.getActiveConnection().state != \'disconnected\'"> \
                  <div ng-include="\'templates/applications/standalone-type-smanager.html\'" include-replace></div> \
                </div> \
                <div ng-if="smB.showNewConnectionType == true"> \
                  <div ng-include="\'templates/applications/new-connection-type-smanager.html\'" include-replace></div> \
                </div> \
                <div ng-if="smB.showNewConnection == true || smB.getActiveConnection().state == \'disconnected\'"> \
                  <div ng-include="\'templates/applications/new-connection-smanager.html\'" include-replace></div> \
                </div> \
                <div ng-if="smB.showConfigureConnection == true"> \
                  <div ng-include="\'templates/applications/configure-connection-smanager.html\'" include-replace></div> \
                </div> \
              </div> \
            </div>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/configure-connection-smanager.html',
            '<form class="main_form form-horizontal" name="smanagerConfiguration_form" ng-submit="smB.sendConfiguration(smanagerConfiguration_form)"> \
              <div ng-if="smB.getActiveConnection().so == \'linux\'"> \
                <div class="form-group"> \
                  <div class="col-sm-12"> \
                    Get CPU status \
                    <switch class="pull-right" name="save" ng-model="smB.cfgForm.cpu" on="on" off="off"></switch> \
                  </div> \
                </div> \
                <div class="form-group"> \
                  <div class="col-sm-12"> \
                    Get Memory status \
                    <switch class="pull-right" name="save" ng-model="smB.cfgForm.mem" on="on" off="off"></switch> \
                  </div> \
                </div> \
                <div class="form-group"> \
                  <div class="col-sm-12"> \
                    Get Disk status \
                    <switch class="pull-right" name="save" ng-model="smB.cfgForm.disk" on="on" off="off"></switch> \
                  </div> \
                </div> \
                <div class="form-group"> \
                  <div class="col-sm-12"> \
                    Get Kernel version \
                    <switch class="pull-right" name="save" ng-model="smB.cfgForm.kernel" on="on" off="off"></switch> \
                  </div> \
                </div> \
                <div class="form-group"> \
                  <div class="col-sm-12"> \
                    Get Release version \
                    <switch class="pull-right" name="autologin" ng-model="smB.cfgForm.release" on="on" off="off"></switch> \
                  </div> \
                </div> \
                <div class="form-group"> \
                  <div class="col-sm-12"> \
                    Get Updates status \
                    <switch class="pull-right" name="autologin" ng-model="smB.cfgForm.updates" on="on" off="off"></switch> \
                  </div> \
                </div> \
                <div class="form-group"> \
                  <div class="col-sm-12"> \
                    Get Processes status \
                    <switch class="pull-right" name="autologin" ng-model="smB.cfgForm.processes" on="on" off="off"></switch> \
                  </div> \
                </div> \
                <div class="form-group"> \
                  <div class="col-sm-12"> \
                    Get Network status \
                    <switch class="pull-right" name="autologin" ng-model="smB.cfgForm.network" on="on" off="off"></switch> \
                  </div> \
                </div> \
                <div class="form-group"> \
                  <div class="col-sm-12"> \
                    Do Ping \
                    <switch class="pull-right" name="autologin" ng-model="smB.cfgForm.ping" on="on" off="off"></switch> \
                  </div> \
                </div> \
              </div> \
              <div ng-if="smB.getActiveConnection().so == \'snmp\'"> \
              </div> \
              <div> \
                <button type="button" class="btn btn-default">Save</button> \
              </div> \
            </form>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/menu-smanager.html',
            '<li> \
              <a > \
                <i class="menu__icon fa fa-search"></i> \
                Search \
              </a> \
            </li> \
            <li> \
              <a > \
                <i class="menu__icon fa fa-share-alt"></i> \
                Share \
              </a> \
            </li> \
            <li> \
              <a > \
                <i class="menu__icon fa fa-plug"></i> \
                Devices \
              </a> \
            </li> \
            <li class="divided"> \
              <a > \
                <i class="menu__icon fa fa-cog"></i> \
                Settings \
              </a> \
            </li>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/new-connection-smanager.html',
            '<form class="main_form form-horizontal" name="smanagerConnect_form" ng-submit="smB.sendConnect(smanagerConnect_form)"> \
              <div class="form-group"> \
                <div class="col-sm-12"> \
                  <input type="text" class="form-control" name="inputDescription" placeholder="Description" ng-model="smB.Form.description"> \
                </div> \
              </div> \
              <div class="form-group"> \
                <div class="col-sm-12"> \
                  <input type="text" class="form-control" name="inputHost" placeholder="Host" ng-model="smB.Form.host" required> \
                </div> \
                <div class="col-sm-12" ng-show="smanagerConnect_form.inputHost.$invalid && smB.smanagerConnect_form.submitted"> \
                  <small class="text-danger pull-left" ng-show="smanagerConnect_form.inputHost.$error.required">Please insert a host</small> \
                </div> \
              </div> \
              <div class="form-group" ng-if="smB.Form.so != \'snmp\'"> \
                <div class="col-sm-12"> \
                  <select class="form-control" ng-options="credential.uuid as credential.description + \' - \' + credential.username for credential in smB.credentials" ng-model="smB.Form.credential"> \
                    <option value="">-- Select Credential --</option> \
                  </select> \
                </div> \
                <div class="col-sm-12"> \
                  <small class="pull-left text-primary cursor-pointer" ng-click="smB.manageCredentials();">Manage Credentials</small> \
                </div> \
              </div> \
              <div class="form-group" ng-if="smB.Form.so != \'windows\'"> \
                <div class="col-sm-12"> \
                  <input type="text" class="form-control" name="inputPort" placeholder="Port" ng-model="smB.Form.port" required> \
                </div> \
                <div class="col-sm-12"> \
                  <small ng-if="smB.Form.so == \'vmware\'" class="pull-left">Default VMware web service port is 443. If connection cannot be established, check for possible port customization in the vCenter Server or ESX(i) server settings</small> \
                  <small ng-if="smB.Form.so == \'linux\'"" class="pull-left">Default SSH service port is 22. If connection cannot be established, check for possible port customization in the SSH service settings</small> \
                </div> \
              </div> \
              <div class="form-group" ng-if="smB.Form.save && smB.Form.so != \'vmware\' && smB.Form.so != \'netapp\'"> \
                <div class="col-sm-12"> \
                  Save Connection in config file \
                  <switch class="pull-right" name="save" ng-model="smB.Form.save" on="on" off="off"></switch> \
                </div> \
              </div> \
              <div class="form-group" ng-if="smB.Form.so != \'snmp\' && smB.Form.so != \'vmware\' && smB.Form.so != \'netapp\'"> \
                <div class="col-sm-12"> \
                  Auto Login \
                  <switch class="pull-right" name="autologin" ng-model="smB.Form.autologin" on="on" off="off"></switch> \
                </div> \
              </div> \
              <div> \
                <button type="button" class="btn btn-default" ng-if="smB.Form.save" ng-click="smB.saveConnection()">Save</button> \
                <button type="button" class="btn btn-primary" ng-if="smB.Form.uuid" ng-click="smB.saveConnection(); smB.sendConnect(smanagerConnect_form)">Save & Rescan</button> \
                <button type="submit" class="btn btn-primary" ng-if="!smB.Form.uuid" ng-disabled="smB.getActiveConnection().type == \'connected\'">Connect</button> \
              </div> \
            </form>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/new-connection-type-smanager.html',
            '<div class="main_form"> \
              <p>Select the type of server you want to register with managed infrastructure. All registred servers can be found under the Manager servers node on the Infrastructure tab.</p> \
              <table class="table table-hover m-t-xl"> \
                <tbody> \
                  <tr class="cursor-pointer" ng-click="smB.newConnection(\'vmware\')"> \
                    <th class="col-sm-2 p-m"><img src="/img/vmware.png" width="75px"></th> \
                    <td class="lh-2">Adds vCenter Server (recommended), or standalone vSphere Hypervisor (ESX/ESXi)</td> \
                  </tr> \
                  <tr class="cursor-pointer" ng-click="smB.newConnection(\'netapp\')"> \
                    <th class="col-sm-2 p-m"><img src="/img/netapp.png" width="75px"></th> \
                    <td class="lh-2">Adds NetApp FAS series. NFS, Fibre Channel (FC) and iSCSI connectivity is supported.</td> \
                  </tr> \
                  <tr class="cursor-pointer" ng-click="smB.newConnection(\'windows\')"> \
                    <th class="col-sm-2 p-m"><i class="fa fa-windows"></i></th> \
                    <td class="lh-2">Adds Microsoft Windows Server (Windows 2008 or later)</td> \
                  </tr> \
                  <tr class="cursor-pointer" ng-click="smB.newConnection(\'linux\')"> \
                    <th class="col-sm-2 p-m"><i class="fa fa-linux"></i></th> \
                    <td class="lh-2">Adds Linux server (must have SSH)</td> \
                  </tr> \
                  <tr class="cursor-pointer" ng-click="smB.newConnection(\'snmp\')"> \
                    <th class="col-sm-2 p-m"><i class="fa fa-server"></i></th> \
                    <td class="lh-2">Adds SNMP node for monitoring</td> \
                  </tr> \
                </tbody> \
              </table> \
            </div>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/snapshot-type-smanager.html',
            '<div class="row"> \
              <div class="col-lg-12"> \
                <table class="table table-hover"> \
                  <thead> \
                    <tr> \
                      <th scope="col">Name</th> \
                      <th scope="col">Host</th> \
                      <th scope="col">State</th> \
                      <th scope="col">Size</th> \
                    </tr> \
                  </thead> \
                  <tbody> \
                    <tr class="cursor-pointer" ng-repeat="vm in smB.getActiveConnection().vms | orderBy:\'name\'" context-menu="smB.snapshotVMContextMenu"> \
                      <th class="col-sm-4">{{::vm.vm.name}}</th> \
                      <td class="col-sm-4">{{::vm.host}}</td> \
                      <td class="col-sm-2">{{::vm.state}}</td> \
                      <td class="col-sm-2">{{::vm.size}}</td> \
                    </tr> \
                  </tbody> \
                </table> \
              </div> \
            </div>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/standalone-type-smanager.html',
            '<div class="row"> \
              <div class="col-lg-4"> \
                <div class="row"> \
                  <!-- START System Monitoring --> \
                  <div class="col-lg-12 col-sm-6"> \
                    <div class="panel panel-default bg-gray-dark b-a-0"> \
                      <div class="panel-heading"> System Monitoring </div> \
                      <ul class="list-group"> \
                        <li class="list-group-item no-bg"> \
                          <h5>CPU</h5> \
                          <p>{{smB.getCurrentCpu()}} <i class="fa fa-fw fa-refresh cursor-pointer" ng-class="{\'fa-spin\':smB.loadingCpu}" ng-click="smB.remoteRefresh(\'cpu\');"></i></p> \
                          <div class="row"> \
                            <div class="col-sm-6">{{smB.getCpuCores()}} Cores @ <span class="text-white"> {{smB.getCpuLoad()}}%</span></div> \
                            <div class="col-sm-6"> \
                              <div class="progress m-t-1  b-r-a-0 h-3"> \
                                <div class="progress-bar" role="progressbar" aria-valuenow="{{smB.getCpuLoad()}}" aria-valuemin="0" aria-valuemax="100" style="width: {{smB.getCpuLoad()}}%;"> \
                                  <span class="sr-only">{{smB.getCpuLoad()}}% Complete</span> \
                                </div> \
                              </div> \
                            </div> \
                          </div> \
                        </li> \
                        <li class="list-group-item no-bg"> \
                          <h5>Memory <small>(Ram)</small></h5> \
                          <p>{{smB.getActiveConnection().mem[0].type}} @{{smB.getActiveConnection().mem[0].speed}} <i class="fa fa-fw fa-refresh cursor-pointer" ng-class="{\'fa-spin\':smB.loadingMem}" ng-click="smB.remoteRefresh(\'mem\');"></i></p> \
                          <div class="media_box"> \
                            <div class="media-left"> \
                              <p class="data-attributes media-object"> \
                                <span data-peity=\'{ "fill": ["#08A5E1", "#2A88C5", "#0058A1"], "innerRadius": 18, "radius": 28 }\' donut-chart>{{(smB.getActiveConnection().mem[0].used / smB.getActiveConnection().mem[0].total * 100).toFixed(1)}},{{(smB.getActiveConnection().mem[0].cache / smB.getActiveConnection().mem[0].total * 100).toFixed(1)}},{{(smB.getActiveConnection().mem[0].free / smB.getActiveConnection().mem[0].total * 100).toFixed(1)}}</span> \
                              </p> \
                            </div> \
                            <div class="media-body media-top"> \
                              <h2 class="media-heading f-w-300 m-b-0 m-t-0">{{(smB.getActiveConnection().mem[0].total / 1024).toFixed(2)}} <small class="text-white">GB</small></h2> Total Memory \
                            </div> \
                            <div class="row"> \
                              <div class="col-sm-4"> \
                                <small><i class="fa fa-fw fa-circle text-cerulean"></i> Allocated</small> \
                                <h5 class="m-b-0">{{smB.getActiveConnection().mem[0].used}} MB</h5> \
                                <p>{{(smB.getActiveConnection().mem[0].used / smB.getActiveConnection().mem[0].total * 100).toFixed(1)}}%</p> \
                              </div> \
                              <div class="col-sm-4"> \
                                <small><i class="fa fa-fw fa-circle text-curious-blue"></i> In Cache</small> \
                                <h5 class="m-b-0">{{smB.getActiveConnection().mem[0].cache}} MB</h5> \
                                <p>{{(smB.getActiveConnection().mem[0].cache / smB.getActiveConnection().mem[0].total * 100).toFixed(1)}}%</p> \
                              </div> \
                              <div class="col-sm-4"> \
                                <small><i class="fa fa-fw fa-circle text-endaveour"></i> Available</small> \
                                <h5 class="m-b-0">{{smB.getActiveConnection().mem[0].free}} MB</h5> \
                                <p>{{(smB.getActiveConnection().mem[0].free / smB.getActiveConnection().mem[0].total * 100).toFixed(1)}}%</p> \
                              </div> \
                            </div> \
                          </div> \
                        </li> \
                        <li class="list-group-item no-bg"> \
                          <h5 class="m-t-0">Build</h5> \
                          <p>{{smB.getActiveConnection().release}} <i class="fa fa-fw fa-refresh cursor-pointer" ng-class="{\'fa-spin\':smB.loadingRelease}" ng-click="smB.remoteRefresh(\'release\');"></i></p> \
                          <p>Kernel: {{smB.getActiveConnection().kernel}} <i class="fa fa-fw fa-refresh cursor-pointer" ng-class="{\'fa-spin\':smB.loadingKernel}" ng-click="smB.remoteRefresh(\'kernel\');"></i></p> \
                        </li> \
                      </ul> \
                    </div> \
                    <!-- START System updates --> \
                    <div class="panel panel-default b-a-0 bg-gray-dark {{smB.getUpdatesStatus()}}"> \
                      <div class="panel-heading b-b-0">System Updates <span class="label label-white label-outline pull-right"><i class="fa fa-fw fa-refresh cursor-pointer" ng-class="{\'fa-spin\':smB.loadingUpdates}" ng-click="smB.remoteRefresh(\'updates\');"></i></span></div> \
                      <div class="panel-body text-center p-t-0"> \
                        <h1 class="m-t-0 m-b-0 f-w-300">{{smB.getActiveConnection().updates.length}}</h1> \
                        <p class="text-white">Updates</p> \
                      </div> \
                      <div class="panel-footer text-center cursor-pointer" ng-click="smB.toggleUpdates()"> \
                        <a  class="text-muted">See More<i class="m-l-1 fa fa-angle-right"></i></a> \
                        <div ng-if="smB.seeMoreUpdates"><p ng-repeat="update in smB.getActiveConnection().updates" class="m-b-t">{{::update.name}} ({{::update.epoch}}{{::update.version}})</p></div> \
                      </div> \
                    </div> \
                    <!-- END System updates --> \
                    <div class="panel panel-default bg-gray-dark b-a-0"> \
                      <div class="panel-heading"> Network Monitoring </div> \
                      <ul class="list-group"> \
                        <li class="list-group-item no-bg"> \
                          <h5>Interface Traffic <small>(ens160)</small></h5> \
                          <span id="network-monitoring" data-peity=\'{ "width": "100%", "height": 70 }\' lines="{{smB.getActiveConnection()[\'interfaces\'][\'ens160\'].data}}" line-chart></span> \
                        </li> \
                      </ul> \
                    </div> \
                  </div> \
                  <!-- END System Monitoring --> \
                </div> \
              </div> \
              <div class="col-lg-8"> \
                <!-- START Volume Status  --> \
                <div class="panel panel-default b-a-0 bg-gray-darker"> \
                  <ul class="list-group"> \
                    <li class="list-group-item no-bg no_padding"> \
                      <div class="row"> \
                        <div class="col-lg-3 col-sm-6"> \
                          <div class="panel panel-default b-a-0 bg-gray-dark"> \
                            <div class="panel-heading {{smB.getMemStatus()}}"> \
                              <div class="media"> \
                                <div class="media-body"> \
                                  <span class="text-uppercsase">Memory</span> \
                                  <br> \
                                  <h1 class="display-4 m-t-0 m-b-0">{{(smB.getActiveConnection().mem[0].free / smB.getActiveConnection().mem[0].total * 100).toFixed(1)}} <small class="text-uppercase text-white">% </small> \
                                    <span class="label label-white label-outline m-l-1 m-b-3 f-25 label-notice">OK</span> \
                                  </h1> \
                                </div> \
                              </div> \
                            </div> \
                          </div> \
                        </div> \
                        <div class="col-lg-3 col-sm-6"> \
                          <div class="panel panel-default b-a-0 bg-gray-dark"> \
                            <div class="panel-heading {{smB.getCpuStatus()}}"> \
                              <div class="media"> \
                                <div class="media-body"> \
                                  <span class="text-uppercsase">CPU</span> \
                                  <br> \
                                  <h1 class="display-4 m-t-0 m-b-0">{{smB.getCpuLoad()}} <small class="text-uppercase text-white">%</small> \
                                    <span class="label label-white label-outline m-l-1 m-b-3 f-25 label-notice">OK</span> \
                                  </h1> \
                                </div> \
                              </div> \
                            </div> \
                          </div> \
                        </div> \
                        <div class="col-lg-3 col-sm-6"> \
                          <div class="panel panel-default b-a-0 bg-gray-dark"> \
                            <div class="panel-heading {{smB.getMaxDiskStatus()[0]}}"> \
                              <div class="media"> \
                                <div class="media-body"> \
                                  <span class="text-uppercsase">Disk</span> \
                                  <br> \
                                  <h1 class="display-4 m-t-0 m-b-0">{{smB.getMaxDiskStatus()[1]}} <small class="text-uppercase text-white">%</small> \
                                    <span class="label label-white label-outline m-l-1 m-b-3 f-25 label-notice">OK</span> \
                                  </h1> \
                                </div> \
                              </div> \
                            </div> \
                          </div> \
                        </div> \
                        <div class="col-lg-3 col-sm-6"> \
                          <div class="panel panel-default b-a-0 bg-gray-dark"> \
                            <div class="panel-heading bg-danger-i"> \
                              <div class="media"> \
                                <div class="media-body"> \
                                  <span class="text-uppercsase">System</span> \
                                  <br> \
                                  <h1 class="display-4 m-t-0 m-b-0"><span class="label label-white label-outline m-l-1 label-notice">ERROR</span></h1> \
                                </div> \
                              </div> \
                            </div> \
                          </div> \
                        </div> \
                      </div> \
                      <div class="hr-text hr-text-left m-t-1 m-b-1"> \
                        <h6 class="text-white"><strong>Volume Status <i class="fa fa-fw fa-refresh cursor-pointer" ng-class="{\'fa-spin\':smB.loadingDisk}" ng-click="smB.remoteRefresh(\'disk\');"></i></strong></h6> \
                      </div> \
                      <div class="row"> \
                        <div class="col-lg-3 col-md-3 col-sm-6 col-xs-6" ng-repeat="disk in smB.getActiveConnection().disk"> \
                          <h5 class="m-b-1 m-t-0">Path </h5> \
                          <span class="label-gray-lighter label label-outline label-disk" title="{{disk.disk}}">{{disk.disk}}</span> \
                          <h2 class="media-heading f-w-300 m-b-0 m-t-1">{{smB.extractSpace(disk.size, 1)}} <small class="text-white">{{smB.extractSpace(disk.size, 2)}}</small></h2> Volume Size \
                          <p class="data-attributes text-center m-t-2" ng-switch="smB.getDiskStatus(disk.used_percent)[0]"> \
                            <span ng-switch-when="1" data-peity=\'{ "fill": ["#2D99DC", "#222D33"], "innerRadius": 50, "radius": 69 }\' donut-chart>{{smB.extractSpace(disk.used_percent, 1)}}/100</span> \
                            <span ng-switch-when="2" data-peity=\'{ "fill": ["#86B34D", "#2B2F26"], "innerRadius": 50, "radius": 69 }\' donut-chart>{{smB.extractSpace(disk.used_percent, 1)}}/100</span> \
                            <span ng-switch-when="3" data-peity=\'{ "fill": ["#E66C40", "#342824"], "innerRadius": 50, "radius": 69 }\' donut-chart>{{smB.extractSpace(disk.used_percent, 1)}}/100</span> \
                            <span ng-switch-when="4" data-peity=\'{ "fill": ["#CB3E4B", "#342824"], "innerRadius": 50, "radius": 69 }\' donut-chart>{{smB.extractSpace(disk.used_percent, 1)}}/100</span> \
                          </p> \
                          <div class="row"> \
                            <div class="col-sm-6 col-xs-6"> \
                              <small><i class="fa fa-fw fa-circle {{smB.getDiskStatus(disk.used_percent)[1]}}"></i><br> Used Space</small> \
                              <h5 class="m-b-0">{{smB.extractSpace(disk.used_space, 1)}} {{smB.extractSpace(disk.used_space, 2)}}</h5> \
                              <p>{{disk.used_percent}}</p> \
                            </div> \
                            <div class="col-sm-6 col-xs-6"> \
                              <small><i class="fa fa-fw fa-circle text-gray-dark"></i><br> Free Space</small> \
                              <h5 class="m-b-0">{{smB.extractSpace(disk.free_space, 1)}} {{smB.extractSpace(disk.free_space, 2)}}</h5> \
                              <p>{{disk.free_percent}}</p> \
                            </div> \
                          </div> \
                        </div> \
                      </div> \
                    </li> \
                  </ul> \
                </div> \
                <!-- END Volume Status  --> \
                <!-- START Mounted Devices --> \
                <div class="panel panel-default no-bg b-a-2"> \
                  <div class="hr-text hr-text-left m-t-3 m-b-1"> \
                    <h6 class="text-white"><strong>Process explorer <i class="fa fa-fw fa-refresh cursor-pointer" ng-class="{\'fa-spin\':smB.loadingProcess}" ng-click="smB.remoteRefresh(\'processes\');"></i></strong></h6> \
                  </div> \
                  <div class="table-responsive"> \
                    <table class="table table-processes"> \
                      <thead> \
                        <tr> \
                          <th class="small text-muted text-uppercase"><strong>PID</strong> \
                          </th> \
                          <th class="small text-muted text-uppercase"><strong>TTY</strong> \
                          </th> \
                          <th class="small text-muted text-uppercase"><strong>TIME</strong> \
                          </th> \
                          <th class="small text-muted text-uppercase"><strong>Usage</strong> \
                          </th> \
                          <th class="small text-muted text-uppercase"><strong>CMD</strong> \
                          </th> \
                        </tr> \
                      </thead> \
                      <tbody> \
                        <tr ng-repeat="process in smB.getActiveConnection().processes" ng-if="!smB.isSystemProcess(process)"> \
                          <td class="v-a-m"> \
                            <span class="text-white">{{::process.pid}}</span> \
                            <span>({{::process.user}})</span> \
                          </td> \
                          <td class="v-a-m"> \
                            {{::process._tty}} \
                          </td> \
                          <td class="v-a-m"> \
                            <span class="text-white">{{::rocess.stime}}</span> {{::process.time}} \
                          </td> \
                          <td class="v-a-m"> \
                            <span class="text-white"><span>{{::process.cpu}}</span></span> \
                          </td> \
                          <td class="v-a-m"> \
                            <span class="label-gray-lighter label label-outline" title="{{::process.args}}">{{::process.args}}</span> \
                          </td> \
                        </tr> \
                      </tbody> \
                    </table> \
                  </div> \
                </div> \
                <!-- END Mounted Devices --> \
              </div> \
            </div>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/status-smanager.html',
            '<div class="window__status" ng-controller="smStatusController as smS"> \
              <span class="pull-left text-muted" ng-if="!smS.getActiveConnection().footer">{{smS.getActiveConnection().host}}</span> \
              <span class="pull-left text-muted" ng-if="smS.getActiveConnection().footer">{{smS.getActiveConnection().footer}}</span> \
              <span class="pull-right text-success" ng-if="!smS.getActiveConnection().error">{{smS.getActiveConnection().status}}</span> \
              <span class="pull-right text-danger" ng-if="smS.getActiveConnection().error">{{smS.getActiveConnection().error}}</span> \
            </div>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/vcenter-type-smanager.html',
            '<div class="row"> \
              <div class="col-lg-12"> \
                <div class="col-sm-4">{{smB.getActiveConnection()}}</div> \
              </div> \
            </div>'
        );

    }]);
}());

(function () {
    'use strict';
    smanagerApp.run(['$templateCache', function ($templateCache) {

        $templateCache.put('templates/applications/vm-type-smanager.html',
            '<div class="row"> \
              <div class="col-lg-12"> \
                <div class="col-sm-4">{{smB.getActiveConnection()}}</div> \
              </div> \
            </div>'
        );

    }]);
}());

/**
Systems OS - 0.0.1

Copyright (c) 2018 Isart Navarro Farell
License: MIT
*/
var sshApp = angular.module('sshApp', []);

(function () {
	"use strict";
	sshApp.run(['ApplicationsFactory', function (ApplicationsFactory) {

		ApplicationsFactory.registerApplication({
			id: "ssh",
			ico: "terminal",
			name: "SSH",
			menu: true,
			actions: true,
			status: true,
			style: "width:870px;height:600px;top:7%;left:10%;"
		});

	}]);
}());
(function () {
	"use strict";
	sshApp.controller('sshActionController', ['$scope', 'sshFactory', 'connectionsFactory',
		function ($scope, sshFactory, connectionsFactory) {

			var _this = this;
			var APPscope = $scope.$parent.$parent.$parent.$parent;

			/*
			 * Bindings
			 */
			this.logActivated = false;

			$scope.$watch(function () {
				return connectionsFactory.connections();
			}, function (newValue) {
				_this.connections = newValue.ssh;
			});

			$scope.$watch(function () {
				return sshFactory.activeConnection();
			}, function (newValue) {
				_this.activeConnection = newValue;
			});

			this.getActiveConnection = function () {
				return connectionsFactory.getConnectionByUuid(_this.activeConnection);
			};

			/*
			 * ng-click functions
			 */
			this.newConnection = function () {
				APPscope.$broadcast('ssh__new_connection');
			};

			this.disconnectConnection = function () {
				if (_this.activeConnection == null) return;
				APPscope.$broadcast('ssh__disconnect_connection');
			};

			this.deleteConnection = function () {
				if (_this.activeConnection == null) return;
				APPscope.$broadcast('ssh__delete_connection');
			};

			this.toggleLog = function () {
				sshFactory.toggleConnectionLog();
				_this.logActivated = !_this.logActivated;
			};

			this.editConnection = function () {
				if (_this.activeConnection == null) return;
				APPscope.$broadcast('ssh__edit_connection');
			};

			this.downloadLog = function () {
				if (_this.activeConnection == null) return;
				APPscope.$broadcast('ssh__download_log');
			};

		}]);
}());
(function () {
	"use strict";
	sshApp.controller('sshBodyController', ['$scope', '$element', '$timeout', 'sshFactory', 'cmanagerFactory', 'ApplicationsFactory', '$filter', 'modalFactory', 'connectionsFactory', 'ServerFactory',
		function ($scope, $element, $timeout, sshFactory, cmanagerFactory, ApplicationsFactory, $filter, modalFactory, connectionsFactory, ServerFactory) {

			var _this = this;

			/*
			 * Bindings
			 */
			this.showNewConnection = true;
			this.viewSide = true;
			this.resizeId;

			this.Form = {
				autologin: true,
				save: true,
				port: 22
			};
			this.sshConnect_form = {};

			// get ssh connections
			ServerFactory
			.getConfigFile('applications/ssh/config.json', function (data) {
				console.log(data);
				return connectionsFactory.setSavedConnections(data.data);
			}, function () {
				console.log("Error");
			});

			$scope.$watch(function () {
				return connectionsFactory.connections();
			}, function (newValue) {
				_this.connections = newValue.ssh;
			});

			$scope.$watch(function () {
				return sshFactory.activeConnection();
			}, function (newValue) {
				_this.activeConnection = newValue;
			});

			$scope.$watch(function () {
				return cmanagerFactory.credentials();
			}, function (newValue) {
				_this.credentials = newValue;
			});


			/*
			 * Called at sshActionController
			 */
			$scope.$on('ssh__new_connection', function () {
				_this.newConnection();
			});

			/*
			 * Called at sshActionController
			 */
			$scope.$on('ssh__disconnect_connection', function () {
				_this.Form = _this.getActiveConnection();
				connectionsFactory.disconnectConnection(_this.activeConnection);
				_this.showNewConnection = true;
			});

			/*
			 * Called at sshActionController
			 */
			$scope.$on('ssh__delete_connection', function () {
				_this.deleteConnection(_this.getActiveConnection());
			});

			/*
			 * Called at sshActionController
			 */
			$scope.$on('ssh__download_log', function () {
				sshFactory.downloadLog(_this.activeConnection);
			});

			/*
			* Called at sshActionController
			*/
			$scope.$on('ssh__edit_connection', function () {
				_this.editConnection();
			});

			$scope.$watch(function () {
				if (!$element[0].children[1]) return false;

				return [$element[0].children[1].offsetWidth, $element[0].children[1].offsetHeight].join('x');
			}, function () {
				$timeout.cancel(_this.resizeId);

				_this.resizeId = $timeout(function () {
					console.log("resize");
					sshFactory.resizeTerminal();
				}, 250);

			});

			/*
			 * ng-click functions
			 */
			this.toggleSide = function () {
				_this.viewSide = !_this.viewSide;
			};

			this.manageCredentials = function () {
				ApplicationsFactory.openApplication('cmanager');
				ApplicationsFactory.toggleApplication('cmanager');
			};

			this.getActiveConnection = function () {
				return connectionsFactory.getConnectionByUuid(_this.activeConnection);
			};

			this.newConnection = function () {
				_this.Form = {
					autologin: true,
					save: true,
					port: 22
				};
				_this.showNewConnection = true;
				sshFactory.setActiveConnection(null);
			};

			this.sendConnect = function (sshConnect_form) {
				_this.sshConnect_form.submitted = true;
				_this.Form.category = "ssh";

				if (sshConnect_form.$valid) {
					_this.sshConnect_form.submitted = false;
					_this.showNewConnection = false;

					// Fetch connection
					var connection = connectionsFactory.connect(_this.Form);
					sshFactory.setActiveConnection(connection.uuid);
				}
			};

			this.deleteConnection = function (connection) {
				_this.activeConnection = connection.uuid;
				_this.setActiveConnection(connection);

				var modalInstanceRemoveConnection = modalFactory.openRegistredModal("question", ".window--ssh .window__main",
                    {
                        title: function () {
                            return "Delete connection " + (_this.getActiveConnection().description ? _this.getActiveConnection().description : _this.getActiveConnection().hostname);
                        },
                        text: function () {
                            return "Remove the selected connection from the inventory?";
                        }
                    }
                );
				modalInstanceRemoveConnection.result.then(function (res) {
					if (res === true) connectionsFactory.deleteConnection(connection.uuid);

					_this.newConnection();

				});
			};

			this.setActiveConnection = function (connection) {

				// Is not connected
				if (connection.state !== "connected") {
					_this.showNewConnection = true;
					sshFactory.setActiveConnection(connection.uuid);
					_this.Form = connection;

				} else if (connection.state !== "new") {
					console.log("not new");
					_this.showNewConnection = false;
					sshFactory.setActiveConnection(connection.uuid);

					// Not initialized connection
				} else if (connection.state === "new") {
					console.log("new");
					_this.showNewConnection = true;
					sshFactory.setActiveConnection(connection.uuid);
					_this.Form = connection;
				}
			};

			this.editConnection = function (uuid) {

				if (uuid) {
					// Set _this.activeConnection manually to make sure _this.getActiveConnection() gets correct results
					_this.activeConnection = uuid;
					sshFactory.setActiveConnection(uuid);
				}

				_this.Form = _this.getActiveConnection();
				_this.showNewConnection = true;
			};

		}]);
}());
(function () {
	"use strict";
	sshApp.controller('sshStatusController', ['$scope', 'sshFactory', '$filter', 'connectionsFactory',
		function ($scope, sshFactory, $filter, connectionsFactory) {

			var _this = this;

			/*
			 * Bindings
			 */

			$scope.$watch(function () {
				return connectionsFactory.connections();
			}, function (newValue) {
				_this.connections = newValue.ssh;
			});

			$scope.$watch(function () {
				return sshFactory.activeConnection();
			}, function (newValue) {
				_this.activeConnection = newValue;
			});

			this.getActiveConnection = function () {
				return $filter('filter')(_this.connections, {uuid: _this.activeConnection})[0];
			};

		}]);
}());
(function () {
	"use strict";
	sshApp.factory('sshFactory', ['socket', 'connectionsFactory', 'toastr', '$timeout',
		function (socket, connectionsFactory, toastr, $timeout) {

			// Private
			var activeConnection = null;
			var sessionLog = [];
			var sessionLogEnable = false;
			var logDate;
			var currentDate;

			var newData = function (data) {
				var terminals = connectionsFactory.getSSHTerminals();

				terminals[data.uuid].write(data.text);
				if (sessionLogEnable) {
					sessionLog[data.uuid] += data.text
				}
			};

			var newProp = function (data) {
				connectionsFactory.getConnectionByUuid(data.uuid)[data.prop] = data.text;

				// CONN CLOSE
				if (data.prop === "status" && data.text === "CONN CLOSE") {
					connectionsFactory.getConnectionByUuid(data.uuid).state = "disconnected";

					// CON ERROR
				} else if (data.prop === "status" && data.text !== "SSH CONNECTION ESTABLISHED") {

					// Error connecting
					if (connectionsFactory.getConnectionByUuid(data.uuid).state === "new") {
						connectionsFactory.getConnectionByUuid(data.uuid).state = "disconnected";
					}
					connectionsFactory.getConnectionByUuid(data.uuid).error = data.text;
					toastr.error(data.text, 'Error (' + connectionsFactory.getConnectionByUuid(data.uuid).host + ')');

					// CONN OK
				} else if (data.text === "SSH CONNECTION ESTABLISHED") {
					connectionsFactory.getConnectionByUuid(data.uuid).state = "connected";
					connectionsFactory.getConnectionByUuid(data.uuid).error = null;
					toastr.success(data.text, 'Connected (' + connectionsFactory.getConnectionByUuid(data.uuid).host + ')');
				}
			};

			// Public
			var resizeTerminal = function () {
				var cols;
				var rows;

				var terminals = connectionsFactory.getSSHTerminals();

				for (var i in terminals){
					if (terminals.hasOwnProperty(i)) {

						var term = terminals[i];
						if (!term.element || !term.element.parentElement) {
							return null;
						}
						var parentElementStyle = window.getComputedStyle(term.element.parentElement);
						var parentElementHeight = parseInt(parentElementStyle.getPropertyValue('height'));
						var parentElementWidth = Math.max(0, parseInt(parentElementStyle.getPropertyValue('width')));

						if (!term.renderer.dimensions.actualCellWidth) term.renderer.dimensions.actualCellWidth = 9;
						if (!term.renderer.dimensions.actualCellHeight) term.renderer.dimensions.actualCellHeight = 17;

						var geometry = {
							cols: Math.floor((parentElementWidth - 10) / term.renderer.dimensions.actualCellWidth),
							rows: Math.floor(parentElementHeight / term.renderer.dimensions.actualCellHeight)
						};

						if (geometry) {
							if (term.rows !== geometry.rows || term.cols !== geometry.cols) {
								term.renderer.clear();
								term.resize(geometry.cols, geometry.rows);
							}
						}

						cols = terminals[i].cols;
						rows = terminals[i].rows;

						console.log(cols, rows);

						socket.emit('ssh_session__geometry', cols, rows);
					}
				}

			};

			/*
			 * SSH download log
			 */
			var downloadLog = function (uuid) {
				if (uuid === undefined) return;

				var myFile = 'WebSSH2-' + logDate.getFullYear() + (logDate.getMonth() + 1) + logDate.getDate() + '_' + logDate.getHours() + logDate.getMinutes() + logDate.getSeconds() + '.log';

				// regex should eliminate escape sequences from being logged.
				var blob = new Blob([sessionLog[uuid].replace(/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g, '')], {
					type: 'text/plain'
				});

				if (window.navigator.msSaveOrOpenBlob) {
					window.navigator.msSaveBlob(blob, myFile)
				} else {
					var elem = window.document.createElement('a');
					elem.href = window.URL.createObjectURL(blob);
					elem.download = myFile;
					document.body.appendChild(elem);
					elem.click();
					document.body.removeChild(elem);
				}
			};

			/*
			 * SSH toggle logging
			 */
			var toggleConnectionLog = function () {
				var connections = connectionsFactory.connections();

				if (sessionLogEnable === true) {
					currentDate = new Date();

					connections.sshApp.forEach(function (connection) {
						sessionLog[connection.uuid] += '\r\n\r\nLog End for ' + null + ': ' +
							currentDate.getFullYear() + '/' + (currentDate.getMonth() + 1) + '/' +
							currentDate.getDate() + ' @ ' + currentDate.getHours() + ':' +
							currentDate.getMinutes() + ':' + currentDate.getSeconds() + '\r\n'
					});

					logDate = currentDate;
				} else {
					currentDate = new Date();

					connections.sshApp.forEach(function (connection) {
						sessionLog[connection.uuid] = 'Log Start for ' + null + ': ' +
							currentDate.getFullYear() + '/' + (currentDate.getMonth() + 1) + '/' +
							currentDate.getDate() + ' @ ' + currentDate.getHours() + ':' +
							currentDate.getMinutes() + ':' + currentDate.getSeconds() + '\r\n\r\n'
					});

					logDate = currentDate;
				}

				sessionLogEnable = !sessionLogEnable;
			};

			return {
				resizeTerminal: resizeTerminal,
				setActiveConnection: function (uuid) {
					activeConnection = uuid;
					$timeout(function () {resizeTerminal();}, 100);
				},
				activeConnection: function () {
					return activeConnection;
				},
				newData: newData,
				newProp: newProp,
				downloadLog: downloadLog,
				toggleConnectionLog: toggleConnectionLog
			};

		}]);
}());
(function () {
	"use strict";
	sshApp.run(['$templateCache', function ($templateCache) {

		$templateCache.put('templates/applications/actions-ssh.html',
			'<div class="window__actions" ng-controller="sshActionController as sshA"> \
			  <a class="window__item"  ng-click="sshA.newConnection()"> \
				<i class="fa fa-plus text-success"></i> \
			  </a> \
			  <a class="window__item separator" ></a> \
			  <a class="window__item" title="Edit connection" ng-click="sshA.editConnection()"> \
				<i class="fa fa-edit" ng-class="{\'text-primary\': sshA.activeConnection != null}"></i> \
			  </a> \
			  <a class="window__item" title="Disconnect" ng-click="sshA.disconnectConnection()"> \
				<i class="fa fa-close" ng-class="{\'text-danger\': sshA.activeConnection != null && sshA.getActiveConnection.state == \'connected\'}"></i> \
			  </a> \
			  <a class="window__item" title="Delete" ng-click="sshA.deleteConnection()"> \
				<i class="fa fa-trash" ng-class="{\'text-danger\': sshA.activeConnection != null}"></i> \
			  </a> \
			  <a class="window__item separator" ></a> \
			  <a class="window__item" ng-click="sshA.toggleLog()"> \
				<i class="fa fa-file-o" ng-class="{\'fa-file-text-o\': sshA.logActivated, \'fa-file-o\': !sshA.logActivated, \'text-primary\': sshA.activeConnection != null}"></i> \
			  </a> \
			  <a class="window__item" ng-click="sshA.downloadLog()"> \
				<i class="fa fa-download" ng-class="{\'text-primary\': sshA.activeConnection != null}"></i> \
			  </a> \
			  <a class="window__item separator" ></a> \
			</div>'
		);

	}]);
}());
(function () {
	"use strict";
	sshApp.run(['$templateCache', function ($templateCache) {

		$templateCache.put('templates/applications/body-ssh.html',
			'<div class="window__body with_status" ng-controller="sshBodyController as sshB"> \
			  <div class="window__side" ng-if="sshB.viewSide"> \
				<div class="menu__item" ng-repeat="connection in sshB.connections track by $index" ng-class="{\'active\': connection.uuid == sshB.activeConnection}" ng-click="sshB.setActiveConnection(connection)" ng-if="connection != undefined"> \
				  <h5> \
					{{::connection.description}} <small>({{::connection.host}})</small> \
					<i class="fa fa-circle pull-right m-t-f" ng-class="{\'text-danger\': connection.state == \'disconnected\', \'text-success\': connection.state == \'connected\'}"></i> \
				  </h5> \
				</div> \
				<div class="secondary-content__new__box__toggle pointer visible-lg"> \
				  <div class="secondary-content__new__box__toggle__slide" ng-click="sshB.toggleSide()"> \
					<i class="fa fa-arrow-left sidebar-open-font open-sidebar"></i> \
				  </div> \
				</div> \
			  </div> \
			  <div class="secondary-content__new__box__toggle toggle_left pointer visible-lg" ng-if="!sshB.viewSide" ng-click="sshB.toggleSide()"> \
				<i class="fa fa-arrow-right sidebar-open-font open-sidebar"></i> \
			  </div> \
			  <div class="window__main no_padding"> \
				<div ng-if="sshB.showNewConnection == true || sshB.getActiveConnection().state == \'disconnected\'"> \
				  <form class="main_form form-horizontal" name="sshConnect_form" ng-submit="sshB.sendConnect(sshConnect_form)"> \
					<div class="form-group"> \
					  <div class="col-sm-12"> \
						<input type="text" class="form-control" name="inputDescription" placeholder="Description" ng-model="sshB.Form.description"> \
					  </div> \
					</div> \
					<div class="form-group"> \
					  <div class="col-sm-12"> \
						<input type="text" class="form-control" name="inputHost" placeholder="Host" ng-model="sshB.Form.host" required> \
					  </div> \
					  <div class="col-sm-12" ng-show="sshConnect_form.inputHost.$invalid && sshB.sshConnect_form.submitted"> \
						<small class="text-danger pull-left" ng-show="sshConnect_form.inputHost.$error.required">Please insert a host</small> \
					  </div> \
					</div> \
					<div class="form-group"> \
					  <div class="col-sm-12"> \
						<select class="form-control" ng-options="credential.uuid as credential.description + \' - \' + credential.username for credential in sshB.credentials" ng-model="sshB.Form.credential"> \
						  <option value="">-- Select Credential --</option> \
						</select> \
					  </div> \
					  <div class="col-sm-12"> \
						<small class="pull-left text-primary cursor-pointer" ng-click="sshB.manageCredentials()">Manage Credentials</small> \
					  </div> \
					</div> \
					<div class="form-group"> \
					  <div class="col-sm-12"> \
						Save Connection in config file \
						<switch class="pull-right" name="save" ng-model="sshB.Form.save" on="on" off="off"></switch> \
					  </div> \
					</div> \
					<div class="form-group" ng-if="sshB.Form.save"> \
					  <div class="col-sm-12"> \
						Auto Login \
						<switch class="pull-right" name="autologin" ng-model="sshB.Form.autologin" on="on" off="off"></switch> \
					  </div> \
					</div> \
					<div> \
					  <button type="button" class="btn btn-default" ng-if="sshB.Form.save">Save</button> \
					  <button type="submit" class="btn btn-primary">Connect</button> \
					</div> \
				  </form>\
				</div> \
				<div class="fill" ng-repeat="connection in sshB.connections" ng-show="sshB.activeConnection == connection.uuid && sshB.showNewConnection != true"> \
				  <div class="fill" ng-show="sshB.showNewConnection == false"> \
					<div id="terminal-container-{{connection.uuid}}" class="terminal-container terminal"></div> \
				  </div> \
				</div> \
			  </div> \
			</div>'
		);

	}]);
}());
(function () {
	"use strict";
	sshApp.run(['$templateCache', function ($templateCache) {

		$templateCache.put('templates/applications/menu-ssh.html',
			'<li> \
			  <a > \
				<i class="menu__icon fa fa-download"></i> \
				Save \
			  </a> \
			</li> \
			<li> \
			  <a > \
				<i class="menu__icon fa fa-folder-open"></i> \
				Open \
			  </a> \
			</li> \
			<li> \
			  <a > \
				<i class="menu__icon fa fa-print"></i> \
				Print \
			  </a> \
			</li> \
			<li> \
				<a > \
				  <i class="menu__icon fa fa-share-alt"></i> \
				  Share \
				</a> \
			  </li> \
			  <li class="divided"> \
				<a > \
				  <i class="menu__icon fa fa-file"></i> \
				  Format \
				</a> \
			</li> \
			<li> \
				<a > \
				  <i class="menu__icon fa fa-cog"></i> \
				  Settings \
			  </a> \
			</li>'
		);

	}]);
}());
(function () {
	"use strict";
	sshApp.run(['$templateCache', function ($templateCache) {

		$templateCache.put('templates/applications/status-ssh.html',
			'<div class="window__status" ng-controller="sshStatusController as sshS"> \
			  <span class="pull-left text-muted" ng-if="!sshS.getActiveConnection().footer">{{sshS.getActiveConnection().host}}</span> \
			  <span class="pull-left text-muted" ng-if="sshS.getActiveConnection().footer">{{sshS.getActiveConnection().footer}}</span> \
			  <span class="pull-right text-success" ng-if="!sshS.getActiveConnection().error">{{sshS.getActiveConnection().status}}</span> \
			  <span class="pull-right text-danger" ng-if="sshS.getActiveConnection().error">{{sshS.getActiveConnection().error}}</span> \
			</div>'
		);

	}]);
}());